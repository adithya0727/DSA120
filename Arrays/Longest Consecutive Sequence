/* Approach:
Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.
Input: nums = [100,4,200,1,3,2]
Output: 4
1) so without sorting we have to find the length of longest sequence in any random order. We mainly use SET becuase of the .count() functionality it provides to check
if the previous (or) next element exists in the set which can't be done in an array.
INTUITION : store all elements in set.
pattern : iterate through each element and check if it has a number before it existing in the set like (st[0] = 100 ; check if 99 exists). if yes : just move on to the next element.
if not : then it is the starting of a new sequence. Then we use a while loop to keep checking how far the sequence goes (accurately the length is captured).
Record the maximum length and then return it. 
We perform ele+len : because we are using the same element : so as length is increased so are the numbers we ought to find like : ele =1 ; ele+1 is found , then len =2;
then we serach for (ele:1 and then len :2) = 3 and so on...
*/

1) int longestConsecutive(vector<int>& nums) {
        int mx=0,len=0;
        unordered_set<int>st(nums.begin(), nums.end());
        for(auto &ele : st){
            if(!st.count(ele-1)){
                len = 1;
                while(st.count(ele+len)){
                    ++len;
                }
            mx = max(mx,len);  
            }   
        }
        return mx;
    }
