/* Approaches 
Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
1) using two for loop and comparing with each element for the particular condition.
2) using map , one loop for two purposes : 1) add elements to map irrespectively 2)if element already exists then incement count based on the m[key] value.
pattern : as the repeatition increases from once , we get +1 , but second time , we get +2 ways , thrid , +3 ways  of pairs.

*/

1) int numIdenticalPairs(vector<int>& nums) {
        int count =0,n=nums.size();
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(i<j && nums[i] == nums [j]){
                    count++;
                }
            }
        }
        return count;
    }


2) int numIdenticalPairs(vector<int>& nums) {
        int count =0,n=nums.size();
        unordered_map<int,int>m;
        for(int i=0;i<n;i++){
            if(m.find(nums[i])!=m.end()){
                count += m[nums[i]];
            }
            m[nums[i]]++;
        }
        return count;
    }
