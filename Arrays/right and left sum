/* Approaches :
1) brute force : using two loops , left = add until i and right = add from i to end and abs(l-r).
2) 3 vectors : l -> sequentially add numbers to sum and push (starting from 0)| r -> from the last add numbers and push back | res -> abs(l[i]-r[i]. 
*/
1) vector<int> leftRightDifference(vector<int>& nums) {
        int leftsum=0,rightsum=0;
        vector<int>v(nums.size());
        for(int i=0;i<nums.size();i++){
            for(int j=0;j<i;j++){
                leftsum += nums[j];
            }

            for(int k=i+1;k<nums.size();k++){
                rightsum += nums[k];
            }
            v[i] = abs(leftsum - rightsum);
            leftsum=0;
            rightsum=0;
        }
        return v;
    }

2) class Solution {
public:
    vector<int> leftRigthDifference(vector<int>& nums) {
        vector<int> lsum, res;
        int total = 0;
        
        int n = nums.size();
        int sum = 0;
        for(int i = 0; i<n; i++){
            lsum.push_back(sum);
            sum += nums[i];
            total +=nums[i];
        }

        sum = 0;
        vector<int> rsum(n, 0);
        for(int i = n-1; i>=0; i--){
            rsum[i] = sum;
            sum +=nums[i];
        }
        
        for(int i = 0; i<n; i++){
            res.push_back(abs(lsum[i]-rsum[i]));
        }
        
        return res;
    }
};
