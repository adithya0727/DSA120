/*Approach:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
1) two functions : first to find the elements first occurance index : if mid == target , we keep moving towards the left till start <=end and thus eventually we'll keep updating res1 till we find the leftmost index of target.
Second function : Similarly , if mid == target => we keep moving towards the right to find the last occurance and keep updating it till then.
therefore : TWO BINARY SEARCHES USED TO FIND THE LEFTMOST AND RIGHTMOST INDEX OF TARGET.
LEARNING : TO OPTIMIZE USE FUNCTIONS INSTEAD OF ONE BIG LONG CODE.
*/

1) int firstele(vector<int>& nums, int &target){
        int res1=-1;
        int start=0,end=nums.size()-1;
        while(start <= end){
            int mid = start + (end-start)/2;
            if(nums[mid] == target){
                res1 = mid;
                end = mid - 1;
            }
            else if(nums[mid] >= target){
                end = mid - 1;
            }
            else{
                start = mid + 1;
            }
        }
        return res1;
    }

    int secondele(vector<int>& nums, int &target){
        int res2=-1;
        int start=0,end=nums.size()-1;
        while(start <= end){
            int mid = start + (end-start)/2;
            if(nums[mid] == target){
                res2 = mid;
                start = mid + 1;
            }
            else if(nums[mid] <= target){
                start = mid + 1;
            }
            else{
                end = mid -1;
            }
        }
        return res2;
    }

public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int>v;
        int x = firstele(nums,target);
        int y = secondele(nums,target);
        v.push_back(x);    
        v.push_back(y); 
        return v;
    }
