/*Approach:
Problem statement : arr[] = {1,3,5,8}    KEY: 7
So , we should return the element which has the minimum absolute (mod : convert negative to positive)difference value For Example in array=> 
{1-7=6,3-7=4,5-7=2,8-7=1} :: so we return element 8 as the ANSWER as it has the min value post subtraction.
1) so , Lets apply normal BS : if element is already present then we get SUBTRACTED VALUE AS 0. so we return right then.
This problem is bascially broken down in CEIL AND FLOOR , since the minimum value if not equal to mid : it is definitely going to be either 
5 or 8 in the above Example. see which is smaller and return that.
*/

1) int binarysearch(int arr[], int n, int k) {
        int start=0,end=n-1,ceil=0,floor=0;
        while(start <= end){
            int mid = start + (end-start)/2;
            if(arr[mid] == k){           // to check if element is present in array , if yes : 0 => will be the minimum.
                return mid;
            }
            else if(arr[mid] > k){    //all the various candidates that we can get using ceil function : refer CEIL PROGRAM
                ceil = mid;
                end = mid - 1;
            }
            else{
                floor = mid;        //all the various candidates that we can get using Floor function : refer FLOOR
                start = mid + 1;
            }
        }
      int x = abs(k-floor);
      int y = abs (k-ceil);
      if(x > y ){
          return y;
      }else{
        return x;
      }
        return -1;
    }
