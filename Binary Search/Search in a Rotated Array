/*Approach:
Input:
N = 9
A[] = {5, 6, 7, 8, 9, 10, 1, 2, 3}
key = 10
l = 0 , h = 8
Output:
5
Explanation: 10 is found at index 5.
1) CONTINUE AFTER FINDING THE NO_OF_TIMES_ARRAY_HAS_BEEN_ROTATED.
once we have the count : INITIALLY array was not sorted because of rotation and thus now that we have the index of position where the minimum element is :
we have TWO PARTS : ELEMENTS FROM 0 - BEFORE MIN. ELE is all sorted |||| elements INCLUDING MIN. ELE AND TILL THE END IS ALSO SORTED.
So we apply binary search to these tow parts and get the index.
*/

1) private:
    int getminelementindex(int arr[] , int n){         //To get minimum element index which helps us make the seperation between
        int start=0,end=n-1;                            // TWO SORTED HALVES.
        while(start <= end){
            int mid = start + (end-start)/2;
            int prev = (mid+n-1)%n;
            int next = (mid+1)%n;
            if(arr[mid] <= arr[prev] && arr[mid] <= arr[next]){
                return mid;
            }
            else if(arr[start] <= arr[end]){
                return start;
            }
            else if(arr[start] <= arr[mid]){
                start = mid+1;
            }
            else if(arr[mid] <= arr[end]){
                end = mid-1;
            }
        }
    }
    int binarysearch(int arr[] , int l , int h , int key){            //Regular binary search to find INDEX.
        int start=l,end=h;
        while(start <= end){
            int mid = start + (end-start)/2;
            if(arr[mid] == key){
                return mid;
            }
            else if(arr[mid] > key){
                end = mid-1;
            }
            else{
                start = mid+1;
            }
        }
        return -1;
    }
    public:
    int search(int A[], int l, int h, int key){
        int n = h-l+1;
        int count_of_rotated = getminelementindex(A ,n);          \\get min element
        int leftside =  binarysearch(A,l,count_of_rotated-1,key);        \\ apply BS on the left sorted side to find element if exists.
        int rightside =  binarysearch(A,count_of_rotated,h ,key);         \\ apply BS on the right sorted side to find element if exists.
        if(leftside ==-1&& rightside == -1){
            return -1;
        }
        else if(leftside!=-1 && rightside!=-1){                \\if -1 , no elements found!
            return rightside;
        }
        else if(leftside!=-1){
            return leftside;
        }
        else if(rightside!=-1){
            return rightside;
        }
    }
