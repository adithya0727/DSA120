/* Approach:
You are given an n rows and m cols matrix grid representing a field of chocolates where grid[i][j] represents the number of chocolates that you can collect from the (i, j) cell.
You have two robots that can collect chocolates for you:
Robot #1 is located at the top-left corner (0, 0), and
Robot #2 is located at the top-right corner (0, cols - 1).
Return the maximum number of chocolates collection using both robots by following the rules below:
From a cell (i, j), robots can move to cell (i + 1, j - 1), (i + 1, j), or (i + 1, j + 1).
When any robot passes through a cell, It picks up all chocolates, and the cell becomes an empty cell.
When both robots stay in the same cell, only one takes the chocolates.
Both robots cannot move outside of the grid at any moment. 
Both robots should reach the bottom row in grid.

1) Memoization : So we have to find out all possibilities to get the maximum value : we have to move both robots simulatenously since if they are in the same cell
we have to count only once : We use a 3D DP because TO Solve a Particular Sub-Problem we need both the col1 and col2 values together and then on the outer regard
we need to know at which row number we are looking at those columns : therefore we need a 3d dp.
TC : O(N*M*M) * 9 SC : O(N*M*M) + O(N) 
2) Tabulation : Convert and start from the base case : bulid the 2d dp step by step considering all possibilities and store the maximum at each cell : considering
its previously built sum + all 9 possibilities maximum value. 
TC : O(N*M*M) * 9 SC : O(N*M*M) 
*/

1) class Solution {
private:
        int cal(vector<vector<int>>& grid,int row,int col1,int col2,int n,int m,vector<vector<vector<int>>>&dp){
            if(col1 < 0 || col1 >= m || col2 < 0 || col2 >= m){
                return -1e8;
            }
            if(row == n-1){
                if(col1 == col2){
                    return grid[row][col1];
                }
                else{
                    return grid[row][col1] + grid[row][col2];
                }
            }
            if(dp[row][col1][col2] != -1)   return dp[row][col1][col2];
            int maxi = -1e8;
            for(int j1=-1;j1<=1;j1++){
                for(int j2=-1;j2<=1;j2++){
                    int value=0;
                    if(col1 == col2){
                        value = grid[row][col1];
                    }
                    else{
                        value = grid[row][col1] + grid[row][col2];
                    }
                    value += cal(grid,row+1,col1+j1,col2+j2,n,m,dp);
                    maxi = max(maxi,value);
                }
            }
            return dp[row][col1][col2] = maxi;
        }

public:
    int cherryPickup(vector<vector<int>>& grid) {
        int n = grid.size(),m = grid[0].size();
        vector<vector<vector<int>>>dp(n,vector<vector<int>>(m,vector<int>(m,-1)));
        return cal(grid,0,0,m-1,n,m,dp);
    }
};


2) public:
    int solve(int n, int m, vector<vector<int>>& grid) {
        vector<vector<vector<int>>>dp(n,vector<vector<int>>(m,vector<int>(m,-1)));
        for(int j1=0;j1<m;j1++){
            for(int j2=0;j2<m;j2++){
                if(j1 == j2)    dp[n-1][j1][j2] = grid[n-1][j1];
                else{
                    dp[n-1][j1][j2] = grid[n-1][j1] + grid[n-1][j2];
                }
            }
        }
        
        for(int row=n-2;row>=0;row--){
            for(int col1=0;col1<m;col1++){
                for(int col2=0;col2<m;col2++){
                    int maxi = -1e8;
                        for(int j1=-1;j1<=1;j1++){
                            for(int j2=-1;j2<=1;j2++){
                                int value=0;
                                if(col1 == col2){
                                    value = grid[row][col1];
                                }
                                else{
                                    value = grid[row][col1] + grid[row][col2];
                                }
                                if(col1+j1 >=0 && col1+j1 < m && col2+j2 >=0 && col2+j2 < m){
                                    value += dp[row+1][col1+j1][col2+j2];
                                }
                                else{
                                    value += -1e8;
                                }
                                maxi = max(maxi,value);
                                }
                                }
                            dp[row][col1][col2] = maxi;
                            }
                        }
                    }
                    return dp[0][0][m-1];
                }
