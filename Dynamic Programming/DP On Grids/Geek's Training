/* Approach:
Geek is going for n day training program. He can perform any one of these three activities Running, Fighting, and Learning Practice.
Each activity has some point on each day. As Geek wants to improve all his skills, he can't do the same activity on two consecutive days.
Help Geek to maximize his merit points as you are given a 2D array of points points, corresponding to each day and activity.
INTUITION : We have to find all possibly ways to determine the maximum points with constraint in mind -> recursion is the only way.
1) Memoization - From top-bottom : from the (n-1)th day , for all subproblems and for all varieties of last values we find answers : going deeper in the recursion calls
for all possibilities.
2)Tabulation - we build from bottom - up : we build the whole subproblem : day0 : all possible ways with all last values we can get and find the maximum points 
at each level and only then move on to the next day and solve further : using the initial sub problem and so on : we build the next ones and move on in that manner.
3) Alternative Tabulation.
4) Space Optimization.
*/

1) private:
    int cal(vector<vector<int>>& points,vector<vector<int>>&dp, int n,int last){
        if(n==0){        //base case : we need the maximum value : since its the base case : we wont go any below : we just need the max value considering the constraint.
            int maxi = 0;
            for(int i=0;i<=2;i++){
                if(i != last)
                    maxi = max(maxi,points[0][i]);
            }
            return dp[0][0] = maxi;
        }
        if(dp[n][last] != -1)   return dp[n][last];    //Memoization.
        int mxi=0,point=0;    //to determine max_points
        for(int i=0;i<=2;i++){    //for all activities
            if(i != last){    //if its not equal to last in this particular recursive call path , check for the rest all to get maximum.
                point = points[n][i] + cal(points,dp,n-1,i);    //for each activity check for a variety of last values as to which could give us a maximum.
                mxi = max(mxi,point);
            }
        }
        return dp[n][last] = mxi;    //store maximum value for this sub problem and move on : if encountered again : we know what maximum value is had : we re-use it.
    }    //Sub-Problem : combination => (Day + Last choice)
    
  public:
    int maximumPoints(vector<vector<int>>& points, int n) {
        int options = 4;        //2D - DP : N day * 4 Last options.
        vector<vector<int>>dp(n,vector<int>(options,-1));
        return cal(points,dp,n-1,3);
    }

2)  public:        //We use last as size until 3 : so that each time we are storing the maximum value at 3rd position at each level and thereby finally : we have
    int maximumPoints(vector<vector<int>>& points, int n) {    //our maximum value at the last value in the final position.
        vector<vector<int>>dp(n,vector<int>(4,-1));
        dp[0][0] = max(points[0][1],points[0][2]);      //dp[day][last]
        dp[0][1] = max(points[0][0],points[0][2]);    //First we completely solve the 0th Sub-Problem , for all possible cases we could encounter and re-use.
        dp[0][2] = max(points[0][0],points[0][1]);    //and only then move onto the next day.
        dp[0][3] = max(points[0][0],max(points[0][2],points[0][1]));
        for(int days = 1;days<n;days++){    //from 1->(N-1) days.
            for(int last = 0;last<4;last++){    //we check all possible combinations that could come for all kinds of prev values considered.
                int maxi=0;
                for(int task = 0;task<3;task++){    //we check all tasks now , except the last one ofc.
                    if(task != last){
                        int point = points[days][task] + dp[days-1][task];
                        maxi = max(maxi,point);    //get the maximum post iterating through all the tasks.
                    }
                }
                dp[days][last] = maxi;     //store the maximum value we got assuming we took this particular last value . we Find the solution like this for 
            }    //considering all the possible last values for this particular day and then we truly fully finish this day with all possibilities and then move 
        }    //to the next day.
        return dp[n-1][3];    //when we reach the last day : where 3-no prev choice is selected : we would have our maximum value here.
    }

3) Alternative Approach to above problem : what if we can omit the last column and take it as N*3 only :we solve all sub-problems normally : when we reach 
the last (n-1) level - we just have to run a for loop and check which possibility has the maximum value and then store that.

public:
    int maximumPoints(vector<vector<int>>& points, int n) {
        vector<vector<int>>dp(n,vector<int>(4,-1));
        dp[0][0] = max(points[0][1],points[0][2]);      //dp[day][last]
        dp[0][1] = max(points[0][0],points[0][2]);
        dp[0][2] = max(points[0][0],points[0][1]);
        for(int days = 1;days<n;days++){
            for(int last = 0;last<3;last++){
                int maxi=0;
                for(int task = 0;task<3;task++){
                    if(task != last){
                        int point = points[days][task] + dp[days-1][task];
                        maxi = max(maxi,point);
                    }
                }
                dp[days][last] = maxi; 
            }
        }
        int ans=0;
        for(auto &vec : dp[n-1]){
            ans = max(ans,vec);
        }
        return ans;
    }

4) public:
    int maximumPoints(vector<vector<int>>& points, int n) {        //using a 1D vector to solve the problem : keep overwritting it once one whole day is completed
        vector<int>prev(3,0);                    //since all we need is the previous day values : we just need to store in a vector of size 3 (total no. of activities).
        prev[0] = max(points[0][1],points[0][2]);      //prev[day][last]
        prev[1] = max(points[0][0],points[0][2]);    //firstly we'll store the 0th day values.
        prev[2] = max(points[0][0],points[0][1]);
        for(int days = 1;days<n;days++){
            vector<int>temp(3,0);    //temporary var : to store current day's all values : becoz we dont want to tamper and store in prev[] until the whole day 
            for(int last = 0;last<3;last++){    //is calculated using prev vector which should strictly store only yesterday's value.
                int maxi=0;
                for(int task = 0;task<3;task++){
                    if(task != last){
                        int point = points[days][task] + prev[task];
                        maxi = max(maxi,point);
                    }
                }
                temp[last] = maxi;     //at Today Level : store all maximum values for all sub-problems.
            }
            prev = temp;    //once today is fully calculated for all sub-problems : we replace it was our prev 1-D array & continue so on...
        }
        int ans=0;
        for(auto &vec : prev){        //at the last day : calculate the maximum possibility at each sub-problem.
            ans = max(ans,vec);
        }
        return ans;
    }
