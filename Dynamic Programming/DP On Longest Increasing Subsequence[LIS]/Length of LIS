/* Approach:
Given an array a[ ] of n integers, find the Length of the Longest Strictly Increasing Subsequence.
A sequence of numbers is called "strictly increasing" when each term in the sequence is smaller than the term that comes after it.

1) Recursion :
TC : O(2^N)  SC : O(N)
2) Memoization : 
TC : O(N^2)  SC : O(N^2) + O(N)
3) Tabulation :
TC : O(N^2)  SC : O(N^2) 
4) Space Optimization : 
TC : O(N^2)  SC : O(N) 
*/

1) private:
        int cal(int idx,int prev, int &n, int a[], vector<vector<int>>&dp){
            if(idx == n)    return 0;
            int notpick = 0 + cal(idx+1,prev,n,a,dp);
            int pick = 0;
            if(prev == -1 || a[idx] > a[prev])
                pick = 1 + cal(idx+1,idx,n,a,dp);
            return max(notpick,pick);
        }
    
    
    public:
    //Function to find length of longest increasing subsequence.
    int longestSubsequence(int n, int a[])
    {
       vector<vector<int>>dp(n,vector<int>(n+1,-1));
       return cal(0,-1,n,a,dp);
    }


2) private:
        int cal(int idx,int prev, int &n, int a[], vector<vector<int>>&dp){
            if(idx == n)    return 0;
            if(dp[idx][prev+1] != -1)     return dp[idx][prev+1];
            int notpick = 0 + cal(idx+1,prev,n,a,dp);
            int pick = 0;
            if(prev == -1 || a[idx] > a[prev])
                pick = 1 + cal(idx+1,idx,n,a,dp);
            return dp[idx][prev+1] = max(notpick,pick);
        }
    
    
    public:
    //Function to find length of longest increasing subsequence.
    int longestSubsequence(int n, int a[])
    {
       vector<vector<int>>dp(n,vector<int>(n+1,-1));
       return cal(0,-1,n,a,dp);
    }


3) private:
        int cal(int idx,int prev, int &n, int a[], vector<vector<int>>&dp){
            if(idx == n)    return 0;
            if(dp[idx][prev+1] != -1)     return dp[idx][prev+1];
            int notpick = 0 + cal(idx+1,prev,n,a,dp);
            int pick = 0;
            if(prev == -1 || a[idx] > a[prev])
                pick = 1 + cal(idx+1,idx,n,a,dp);
            return dp[idx][prev+1] = max(notpick,pick);
        }
    
    public:
    //Function to find length of longest increasing subsequence.
    int longestSubsequence(int n, int a[])
    {
       vector<vector<int>>dp(n+1,vector<int>(n+1,0));
       for(int i=0;i<=n;i++)    dp[n][i] = 0;
       for(int idx=n-1;idx>=0;idx--){
           for(int prev = -1;prev<idx;prev++){
               int notpick = 0 + dp[idx+1][prev+1];
                int pick = 0;
                if(prev ==-1 || a[idx] > a[prev])
                    pick = 1 + dp[idx+1][idx+1];
            dp[idx][prev+1] = max(notpick,pick);
           }
       }
       return dp[0][0];
    }


4) 
