/* Approach:
Given an array a[ ] of n integers, find the Length of the Longest Strictly Increasing Subsequence.
A sequence of numbers is called "strictly increasing" when each term in the sequence is smaller than the term that comes after it.

1) Recursion :
TC : O(2^N)  SC : O(N)
2) Memoization : 
TC : O(N^2)  SC : O(N^2) + O(N)
3) Tabulation :
TC : O(N^2)  SC : O(N^2) 
4) Space Optimization : 
TC : O(N^2)  SC : O(N) 
5) Space Optimization : 
TC : O(N^2)  SC : O(N) 
6) V.V.V.IMP : PRINT LIS.
TC : O(N^2) + O(Len(LIS))  SC : O(N) 
7) To Solve the Problem Using Binary Search :
TC : O(N*(LogN)) SC : O(N)

*/

1) private:
        int cal(int idx,int prev, int &n, int a[], vector<vector<int>>&dp){
            if(idx == n)    return 0;
            int notpick = 0 + cal(idx+1,prev,n,a,dp);
            int pick = 0;
            if(prev == -1 || a[idx] > a[prev])
                pick = 1 + cal(idx+1,idx,n,a,dp);
            return max(notpick,pick);
        }
    
    
    public:
    //Function to find length of longest increasing subsequence.
    int longestSubsequence(int n, int a[])
    {
       vector<vector<int>>dp(n,vector<int>(n+1,-1));
       return cal(0,-1,n,a,dp);
    }


2) private:
        int cal(int idx,int prev, int &n, int a[], vector<vector<int>>&dp){
            if(idx == n)    return 0;
            if(dp[idx][prev+1] != -1)     return dp[idx][prev+1];
            int notpick = 0 + cal(idx+1,prev,n,a,dp);
            int pick = 0;
            if(prev == -1 || a[idx] > a[prev])
                pick = 1 + cal(idx+1,idx,n,a,dp);
            return dp[idx][prev+1] = max(notpick,pick);
        }
    
    
    public:
    //Function to find length of longest increasing subsequence.
    int longestSubsequence(int n, int a[])
    {
       vector<vector<int>>dp(n,vector<int>(n+1,-1));
       return cal(0,-1,n,a,dp);
    }


3)   public:
    //Function to find length of longest increasing subsequence.
    int longestSubsequence(int n, int a[])
    {
       vector<vector<int>>dp(n+1,vector<int>(n+1,0));
       for(int i=0;i<=n;i++)    dp[n][i] = 0;
       for(int idx=n-1;idx>=0;idx--){
           for(int prev = -1;prev<idx;prev++){
               int notpick = 0 + dp[idx+1][prev+1];
                int pick = 0;
                if(prev ==-1 || a[idx] > a[prev])
                    pick = 1 + dp[idx+1][idx+1];
            dp[idx][prev+1] = max(notpick,pick);
           }
       }
       return dp[0][0];
    }


4) public:
    //Function to find length of longest increasing subsequence.
    int longestSubsequence(int n, int a[])
    {
       vector<int>dp(n+1,0);
       for(int i=0;i<=n;i++)    dp[i] = 0;
       for(int idx=n-1;idx>=0;idx--){
           vector<int>temp(n+1,0);
           for(int prev = -1;prev<idx;prev++){
               int notpick = 0 + dp[prev+1];
                int pick = 0;
                if(prev ==-1 || a[idx] > a[prev])
                    pick = 1 + dp[idx+1];
            temp[prev+1] = max(notpick,pick);
           }
           dp = temp;
       }
       return dp[0];
    }

5) public:
    //Function to find length of longest increasing subsequence.
    int longestSubsequence(int n, int a[])
    {
       vector<int>dp(n,1);
       int ans=0;
       for(int idx=0;idx<n;idx++){
           for(int prev = 0;prev<idx;prev++){
               if(a[prev] < a[idx])
                dp[idx] = max(1 + dp[prev],dp[idx]);
           }
           ans = max(ans,dp[idx]);
       }
       return ans;
    }


6) public:
    //Function to find length of longest increasing subsequence.
    int longestSubsequence(int n, int a[])
    {
       vector<int>dp(n,1), hash(n);                 //hash purpose is to connect and store all the parents to backtrack and find the find along which we got LIS.
       for(int i=0;i<n;i++)     hash[i] = i;
       int LIS_LEN=1,Last_idx=0;        //we capture the lis length from the dp array and last index to know from where we have to start traversing to capture the path.
       for(int idx=0;idx<n;idx++){
           for(int prev = 0;prev<idx;prev++){        //we only need previous until the current index value.
               if(a[prev] < a[idx] && dp[idx] < 1 + dp[prev]){        //get a greater value 
                       dp[idx] = 1 + dp[prev];        //update the dp array
                       hash[idx] = prev;         //and store its parent from where its coming.
                   }
           }
           if(dp[idx] > LIS_LEN){        //each time capture the info once the inner loop ends.
            LIS_LEN = dp[idx];        //update with max length
            Last_idx = idx;        //update the last index.
           }
       }
       vector<int>LIS;        //to store all the elements of the LIS.
       LIS.push_back(a[Last_idx]);        //start from the last.
       while(hash[Last_idx] != Last_idx){        //until the hash vector has the element same as index we traverse : cause that's where we've modified.
            Last_idx = hash[Last_idx];           //move the next parent in the hash using its connectivity.
            LIS.push_back(a[Last_idx]);        //store the elements from the array.
       }
       reverse(LIS.begin(),LIS.end());        //reverse the whole array 
       for(auto &var : LIS)                //printing all its elements.
            cout<<var<<" ";
    cout<<endl;
    return LIS_LEN;        //return maximum length of LIS.
    }


7) public:
    //Function to find length of longest increasing subsequence.
    int longestSubsequence(int n, int a[])
    {
       vector<int>temp;
       temp.push_back(a[0]);
       for(int i=1;i<n;i++){
           if(a[i] > temp.back()){
               temp.push_back(a[i]);
           }
           else{
               auto idx = lower_bound(temp.begin(), temp.end(), a[i]) - temp.begin();
                temp[idx] = a[i];
           }
       }
       return temp.size();
    }
