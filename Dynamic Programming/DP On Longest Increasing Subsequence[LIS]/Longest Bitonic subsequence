/* Approach:          [PATTERN : SAME AS LENGTH OF LIS APPROACH 5]
Given an array of positive integers. Find the maximum length of Bitonic subsequence. 
A subsequence of array is called Bitonic if it is first strictly increasing, then strictly decreasing. Return the maximum length of bitonic subsequence.
Note : A strictly increasing or a strictly decreasing sequence should not be considered as a bitonic sequence.

1) Tabulation : 
TC :  SC : 
*/

1) public:
    int LongestBitonicSequence(int n, vector<int> &nums) {
       vector<int>dp1(n,1),dp2(n,1);
       int ans=0;
       for(int idx=0;idx<n;idx++){
           for(int prev = 0;prev<idx;prev++){
               if(nums[prev] < nums[idx])
                dp1[idx] = max(1 + dp1[prev],dp1[idx]);
           }
       }
       for(int idx=n-1;idx>=0;idx--){
           for(int prev = n-1;prev>idx;prev--){
               if(nums[prev] < nums[idx])
                dp2[idx] = max(1 + dp2[prev],dp2[idx]);
           }
       }
       for(int i=0;i<n;i++){        //To Not Consider A Strictly Increasing or Decreasing Subsequence.
           if(dp1[i] > 1 && dp2[i] > 1)
                ans = max(dp1[i] + dp2[i] - 1 , ans);
       }
       return ans;
    }
