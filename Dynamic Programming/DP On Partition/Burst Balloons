/* Approach:
You are given N balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array arr. You are asked to burst all the balloons.
If you burst the ith balloon, you will get arr[ i - 1 ] * arr[ i ] * arr[ i + 1] coins. If i - 1, or i + 1 goes out of the bounds of the array,
consider it as if there is a balloon with a 1 painted on it.
Return the maximum coins you can collect by bursting the balloons wisely.

1) Recursion :
TC : Exponential SC : O(N)
2) Memoization : 
TC : O(N^3)  SC : O(N^2) + O(N)
3) Tabulation : 
TC : O(N^3) SC : O(N^2)

*/

1) private:
        int cal(int i, int j, vector<int> &arr){
            if(i > j)   return 0;
            int maxi = INT_MIN;
            for(int idx = i;idx <= j;idx++){
                int cost = arr[i-1] * arr[idx] * arr[j+1] + cal(i,idx-1,arr) + cal(idx+1,j,arr);
                maxi = max(maxi,cost);
            }
            return maxi;
        }
    
public:
    int maxCoins(int N, vector<int> &arr) {
        arr.insert(arr.begin(),1);
        arr.push_back(1);
        return cal(1,N,arr);
    }


2) private:
        int cal(int i, int j, vector<int> &arr,vector<vector<int>>&dp){
            if(i > j)   return 0;
            if(dp[i][j] != -1)  return dp[i][j];
            int maxi = INT_MIN;
            for(int idx = i;idx <= j;idx++){
                int cost = arr[i-1] * arr[idx] * arr[j+1] + cal(i,idx-1,arr,dp) + cal(idx+1,j,arr,dp);
                maxi = max(maxi,cost);
            }
            return dp[i][j] = maxi;
        }
    
public:
    int maxCoins(int N, vector<int> &arr) {
        arr.insert(arr.begin(),1);
        arr.push_back(1);
        vector<vector<int>>dp(N+1,vector<int>(N+1,-1));
        return cal(1,N,arr,dp);
    }


3) public:
    int maxCoins(int N, vector<int> &arr) {
        arr.insert(arr.begin(),1);
        arr.push_back(1);
        vector<vector<int>>dp(N+2,vector<int>(N+2,0));
        for(int i=0;i<=N;i++){
            for(int j=0;j<=N;j++){
                if(i > j)   dp[i][j] = 0;
            }
        }
        
        for(int i=N;i>=1;i--){
            for(int j=i;j<=N;j++){
                int maxi = INT_MIN;
                for(int idx = i;idx <= j;idx++){
                    int cost = arr[i-1] * arr[idx] * arr[j+1] + dp[i][idx-1] + dp[idx+1][j];
                    maxi = max(maxi,cost);
                }
            dp[i][j] = maxi;
            }
        }
        return dp[1][N];
    }
