/* Approach:
Given a sequence of matrices, find the most efficient way to multiply these matrices together.
The efficient way is the one that involves the least number of multiplications.
The dimensions of the matrices are given in an array arr[] of size N (such that N = number of matrices + 1) where the ith matrix has the dimensions (arr[i-1] x arr[i]).
1) Recursion :
TC : Exponential SC : O(N)
2) Memoization : 
TC : O(N^3) + O(N) : stack space SC : O(N^2)
3) Tabulation :
TC : O(N^3) => N^2 for all changing states of i and j and for each state we run a for loop as well : worst case N is considered.
SC : O(N^2)
*/

1) private:
        int cal(int i,int j,int &N,int arr[]){
            if(i == j)  return 0;
            int mini = 1e9;
            for(int k = i;k<j;k++){
                int steps = arr[i-1] * arr[k] * arr[j] + cal(i,k,N,arr) + cal(k+1,j,N,arr);
                mini = min(mini,steps);
            }
            return mini;
        }
        
    
    
public:
    int matrixMultiplication(int N, int arr[])
    {
        return cal(1,N-1,N,arr);
    }

2) private:
        int cal(int i,int j,int &N,int arr[],vector<vector<int>>&dp){
            if(i == j)  return 0;
            if(dp[i][j] != -1)  return dp[i][j];
            int mini = 1e9;
            for(int k = i;k<j;k++){
                int steps = arr[i-1] * arr[k] * arr[j] + cal(i,k,N,arr,dp) + cal(k+1,j,N,arr,dp);
                mini = min(mini,steps);
            }
            return dp[i][j] = mini;
        }
        
    
    
public:
    int matrixMultiplication(int N, int arr[])
    {
        vector<vector<int>>dp(N,vector<int>(N,-1));
        return cal(1,N-1,N,arr,dp);
    }


3) public:
    int matrixMultiplication(int N, int arr[])
    {
        vector<vector<int>>dp(N,vector<int>(N,0));
        for(int i=0;i<N;i++)    dp[i][i] = 0;
        for(int i=N-1;i>0;i--){
            for(int j=i+1;j<N;j++){
                int mini = 1e9;
                for(int k = i;k<j;k++){
                    int steps = arr[i-1] * arr[k] * arr[j] + dp[i][k] + dp[k+1][j];
                    mini = min(mini,steps);
                }
            dp[i][j] = mini;
            }
        }
        return dp[1][N-1];
    }

