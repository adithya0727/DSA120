/* Approach :      [PATTERN : FRONT PARTITIONING]
Given a string str, a partitioning of the string is a palindrome partitioning if every sub-string of the partition is a palindrome.
Determine the fewest cuts needed for palindrome partitioning of the given string.

1) Recursion :
TC : Exponential SC : O(N)
2) Memoization :
TC : O(N^2) SC : O(N) + O(N)
3) Tabulation :
TC : O(N^2) SC : O(N)
*/

1) private:
    bool isPalin(string &str){
        int n = str.length();
        for(int i=0;i<n/2;i++){
            if(str[i] != str[n-i-1])
                return false;
        }
        return true;
    }

    int cal(int i,int &n, string &str){
        if(i == n)  return 0;
        string temp = "";
        int min_cost = INT_MAX;
        for(int j=i;j<n;j++){
            temp += str[j];
            if(isPalin(temp)){
                int cost = 1 + cal(j+1,n,str);
                min_cost = min(min_cost,cost);
            }
        }
        return min_cost;
    }


2) private:
    bool isPalin(string &str){
        int n = str.length();
        for(int i=0;i<n/2;i++){
            if(str[i] != str[n-i-1])
                return false;
        }
        return true;
    }

    int cal(int i,int &n, string &str, vector<int>&dp){
        if(i == n)  return 0;
        if(dp[i]!= -1)  return dp[i];
        string temp = "";
        int min_cost = INT_MAX;
        for(int j=i;j<n;j++){
            temp += str[j];
            if(isPalin(temp)){
                int cost = 1 + cal(j+1,n,str,dp);
                min_cost = min(min_cost,cost);
            }
        }
        return dp[i] = min_cost;
    }
    
    
public:
    int palindromicPartition(string str)
    {
        int n = str.length();
        vector<int>dp(n,-1);
        return cal(0,n,str,dp) - 1;
    }


3) private:
    bool isPalin(string &str){
        int n = str.length();
        for(int i=0;i<n/2;i++){
            if(str[i] != str[n-i-1])
                return false;
        }
        return true;
    }
    
public:
    int palindromicPartition(string str)
    {
        int n = str.length();
        vector<int>dp(n+1,0);
        for(int i=n-1;i>=0;i--){
            string temp = "";
            int min_cost = INT_MAX;
            for(int j=i;j<n;j++){
                temp += str[j];
                if(isPalin(temp)){
                    int cost = 1 + dp[j+1];
                    min_cost = min(min_cost,cost);
                }
            }
        dp[i] = min_cost;
        }
        return dp[0] - 1;
    }
