/* Appraoch : 
In the stock market, a person buys a stock and sells it on some future date. Given the stock prices of N days in an array A[ ] and a positive integer K,
find out the maximum profit a person can make in at-most K transactions.
A transaction is equivalent to (buying + selling) of a stock and new transaction can start only when the previous transaction has been completed.

1) Memoization : 
TC : O(N*2*K)  SC : O(N*2*K) + O(N)
2) Tabulation :
TC : O(N*2*K)  SC : O(N*2*K) 
3) Space Optimization :
TC : O(N*2*K)  SC : O(2*K) 

*/

1) private:
        int cal(int idx,int buy, int K, int A[], int &N, vector<vector<vector<int>>>&dp){
            if(idx == N || K == 0)  return 0;
            if(dp[idx][buy][K] != -1)   return dp[idx][buy][K];
            int price = 0;
            if(buy == 1)
                price = max(-A[idx] + cal(idx+1,0,K,A,N,dp) , 0 + cal(idx+1,1,K,A,N,dp));
            else
                price = max(A[idx] + cal(idx+1,1,K-1,A,N,dp) , 0 + cal(idx+1,0,K,A,N,dp));
            return dp[idx][buy][K] = price;
        }
    
  public:
    int maxProfit(int K, int N, int A[]) {
        vector<vector<vector<int>>>dp(N+1,vector<vector<int>>(2,vector<int>(K+1,-1)));
        return cal(0,1,K,A,N,dp);
    }

2) public:
    int maxProfit(int K, int N, int A[]) {
        vector<vector<vector<int>>>dp(N+1,vector<vector<int>>(2,vector<int>(K+1,0)));
        for(int b=0;b<2;b++){
            for(int c=0;c<=K;c++){
                    dp[N][b][c] = 0;
            }
        }
        for(int i=0;i<N;i++){
            for(int b=0;b<2;b++){
                dp[i][b][0] = 0;
            }
        }
        for(int idx=N-1;idx>=0;idx--){
            for(int buy=0;buy<2;buy++){
                for(int capacity=1;capacity<=K;capacity++){
                    int value = 0;
                    if(buy == 1)
                        value = max(-A[idx] + dp[idx+1][0][capacity] , 0 + dp[idx+1][1][capacity]);
                    else
                        value = max(A[idx] + dp[idx+1][1][capacity-1] , 0 + dp[idx+1][0][capacity]);
                    dp[idx][buy][capacity] = value;
                }
            }
        }
        return dp[0][1][K];
    }

3) public:
    int maxProfit(int K, int N, int A[]) {
        vector<vector<int>>dp(2,vector<int>(K+1,0));
        for(int b=0;b<2;b++){
            for(int c=0;c<=K;c++){
                    dp[b][c] = 0;
            }
        }
        for(int b=0;b<2;b++){
            dp[b][0] = 0;
        }
        for(int idx=N-1;idx>=0;idx--){
            vector<vector<int>>temp(2,vector<int>(K+1,0));
            for(int buy=0;buy<2;buy++){
                for(int capacity=1;capacity<=K;capacity++){
                    int value = 0;
                    if(buy == 1)
                        value = max(-A[idx] + dp[0][capacity] , 0 + dp[1][capacity]);
                    else
                        value = max(A[idx] + dp[1][capacity-1] , 0 + dp[0][capacity]);
                    temp[buy][capacity] = value;
                }
            }
            dp = temp;
        }
        return dp[1][K];
    }
