/* Approach:
Given two strings s and t of length n and m respectively. Find the count of distinct occurrences of t in s as a sub-sequence modulo 109 + 7.
1) Memoization : 
TC : O(N*M) SC : O(N*M) + O(N + M)
2) Tabulation :
TC : O(N*M) SC : O(N*M) 
3) Space Optimize :
TC : O(N*M) SC : O(M) 
4) 1-D array optimize : 
TC : O(N*M) SC : O(M) 
*/

1) private:
        int cal(int i, int j,string &s, string &t,vector<vector<int>>&dp,int &MOD){
            if(j < 0)   return 1;
            if(i < 0)   return 0;
            if(dp[i][j] != -1)  return dp[i][j];
            if(s[i] == t[j])
                return dp[i][j] = (cal(i-1,j-1,s,t,dp,MOD) + cal(i-1,j,s,t,dp,MOD))%MOD;
            else
                return dp[i][j] = cal(i-1,j,s,t,dp,MOD)%MOD;
        }
    
    
    public:
    int subsequenceCount(string s, string t)
    {
      int n = s.length(),m = t.length(),MOD = 1e9 + 7;
      vector<vector<int>>dp(n,vector<int>(m,-1));
      return cal(n-1,m-1,s,t,dp,MOD);
    }

2) public:
    int subsequenceCount(string s, string t)
    {
      int n = s.length(),m = t.length(),MOD = 1e9 + 7;
      vector<vector<int>>dp(n+1,vector<int>(m+1,0));
      for(int j=1;j<=m;j++)    dp[0][j] = 0;
      for(int i=0;i<=n;i++)    dp[i][0] = 1;
      for(int i=1;i<=n;i++){
          for(int j=1;j<=m;j++){
              if(s[i-1] == t[j-1])
                dp[i][j] = (dp[i-1][j-1] + dp[i-1][j])%MOD;
            else
                dp[i][j] = (dp[i-1][j])%MOD;
          }
      }
      return dp[n][m];
    }

3) public:
    int subsequenceCount(string s, string t)
    {
      int n = s.length(),m = t.length(),MOD = 1e9 + 7;
      vector<int>dp(m+1,0);
      for(int j=1;j<=m;j++)    dp[j] = 0;
      for(int i=0;i<=n;i++)    dp[0] = 1;
      for(int i=1;i<=n;i++){
          vector<int>temp(m+1,0);
          temp[0] = 1;
          for(int j=1;j<=m;j++){
              if(s[i-1] == t[j-1])
                temp[j] = (dp[j-1] + dp[j])%MOD;
            else
                temp[j] = (dp[j])%MOD;
          }
          dp = temp;
      }
      return dp[m];
    }

4) public:
    int subsequenceCount(string s, string t)
    {
      int n = s.length(),m = t.length(),MOD = 1e9 + 7;
      vector<int>dp(m+1,0);
      for(int j=1;j<=m;j++)    dp[j] = 0;
      for(int i=0;i<=n;i++)    dp[0] = 1;
      for(int i=1;i<=n;i++){
          for(int j=m;j>0;j--){
              if(s[i-1] == t[j-1])
                dp[j] = (dp[j-1] + dp[j])%MOD;
            else
                dp[j] = (dp[j])%MOD;
          }
      }
      return dp[m];
    }
