/* Approach :
Given two strings s and t. Return the minimum number of operations required to convert s to t.
The possible operations are permitted:
Insert a character at any position of the string.
Remove any character from the string.
Replace any character from the string with any other character.

1) Memoization : 
TC : O(N*M)  SC : O(N*M) + O(N + M)
2) Tabulation : 
TC : O(N*M)  SC : O(N*M) 
3) Space Optimize : 
TC : O(N*M)  SC : O(M)

*/

1) private:
        int cal( int idx1, int idx2 , string &s, string &t,vector<vector<int>>&dp){
            if(idx1 < 0)    return idx2+1;
            if(idx2 < 0)    return idx1+1;
            if(dp[idx1][idx2] != -1)    return dp[idx1][idx2];
            if(s[idx1] == t[idx2])
                return dp[idx1][idx2] = 0 + cal(idx1-1,idx2-1,s,t,dp);
            else{
                int insert = 1 + cal(idx1,idx2-1,s,t,dp);
                int deletion = 1 + cal(idx1-1,idx2,s,t,dp);
                int replace = 1 + cal(idx1-1,idx2-1,s,t,dp);
                return dp[idx1][idx2] = min(insert,min(deletion,replace));
            }
        }
    
    
  public:
    int editDistance(string s, string t) {
        int n = s.length(),m = t.length();
        vector<vector<int>>dp(n,vector<int>(m,-1));
        return cal(n-1,m-1,s,t,dp);
    }

2) public:
    int editDistance(string s, string t) {
        int n = s.length(),m = t.length();
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        for(int idx2=0;idx2<=m;idx2++)      dp[0][idx2] = idx2;
        for(int idx1=0;idx1<=n;idx1++)      dp[idx1][0] = idx1;
        for(int idx1=1;idx1<=n;idx1++){
            for(int idx2=1;idx2<=m;idx2++){
                if(s[idx1-1] == t[idx2-1])
                dp[idx1][idx2] = 0 + dp[idx1-1][idx2-1];
            else{
                int insert = 1 + dp[idx1][idx2-1];
                int deletion = 1 + dp[idx1-1][idx2];
                int replace = 1 + dp[idx1-1][idx2-1];
                dp[idx1][idx2] = min(insert,min(deletion,replace));
            }
            }
        }
        return dp[n][m];
    }

3) public:
    int editDistance(string s, string t) {
        int n = s.length(),m = t.length();
        vector<int>dp(m+1,0);
        for(int idx2=0;idx2<=m;idx2++)      dp[idx2] = idx2;
        for(int idx1=1;idx1<=n;idx1++){
            vector<int>temp(m+1,0);
            temp[0] = idx1;
            for(int idx2=1;idx2<=m;idx2++){
                if(s[idx1-1] == t[idx2-1])
                temp[idx2] = 0 + dp[idx2-1];
            else{
                int insert = 1 + temp[idx2-1];
                int deletion = 1 + dp[idx2];
                int replace = 1 + dp[idx2-1];
                temp[idx2] = min(insert,min(deletion,replace));
            }
            }
            dp = temp;
        }
        return dp[m];
    }
