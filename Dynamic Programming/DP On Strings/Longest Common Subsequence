/* Approach :
Given two strings str1 & str 2 of length n & m respectively, return the length of their longest common subsequence. If there is no common subsequence then, return 0. 
A subsequence is a sequence that can be derived from the given string by deleting some or no elements without changing the order of the remaining elements. For example, "abe" is a subsequence of "abcde".

1) Recursion :
TC : O(2^N * 2^M) SC : O(N + M) 
2) Memoization :
TC : O(N * M) SC : O(N*M) + O(N + M) 
3) Tabulation :
TC : O(N * M) SC : O(N*M)
4) Space Optimization :
TC : O(N * M) SC : O(M) 
5) Print LCS.
*/

1)  private:
        int cal(int n, int m, string str1, string str2){
            if(n < 0 || m < 0)  return 0;
            if(str1[n] == str2[m])
                return 1 + cal(n-1,m-1,str1,str2);
            return max(cal(n-1,m,str1,str2),cal(n,m-1,str1,str2));
        }
    
    
  public:
    int lcs(int n, int m, string str1, string str2) {
        return cal(n-1,m-1,str1,str2);
    }

2) private:
        int cal(int n, int m, string &str1, string &str2, vector<vector<int>>&dp){
            if(n < 0 || m < 0)  return 0;
            if(dp[n][m] != -1)  return dp[n][m];
            if(str1[n] == str2[m])
                return dp[n][m] = 1 + cal(n-1,m-1,str1,str2,dp);
            return dp[n][m] = max(cal(n-1,m,str1,str2,dp),cal(n,m-1,str1,str2,dp));
        }
    
  public:
    int lcs(int n, int m, string str1, string str2) {
        vector<vector<int>>dp(n,vector<int>(m,-1));
        return cal(n-1,m-1,str1,str2,dp);
    }

3) public:
    int lcs(int n, int m, string str1, string str2) {
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(str1[i-1] == str2[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];
                else
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[n][m];
    }


4) public:
    int lcs(int n, int m, string str1, string str2) {
        vector<int>dp(m+1,0);
        for(int i=1;i<=n;i++){
            vector<int>temp(m+1,0);
            for(int j=1;j<=m;j++){
                if(str1[i-1] == str2[j-1])
                    temp[j] = 1 + dp[j-1];
                else
                    temp[j] = max(dp[j],temp[j-1]);
            }
            dp = temp;
        }
        return dp[m];
    }


5) // PRINT LONGEST COMMON SUBSEQUENCE : 
public:
    int lcs(int n, int m, string str1, string str2) {
        vector<int>dp(m+1,0);
        string ans = "";
        for(int i=1;i<=n;i++){
            vector<int>temp(m+1,0);
            for(int j=1;j<=m;j++){
                if(str1[i-1] == str2[j-1]){
                    temp[j] = 1 + dp[j-1];
                    ans += str1[i-1];        //We concatinate at the exact point where we see a common element on both strings : that's where we capture the common string.
                }
                else
                    temp[j] = max(dp[j],temp[j-1]);
            }
            dp = temp;
        }
        cout<<ans<<endl;
        return dp[m];
    } 
