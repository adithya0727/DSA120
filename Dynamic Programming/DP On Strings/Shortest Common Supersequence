/* Approach :
Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.
A string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.
Input: str1 = "abac", str2 = "cab"
Output: "cabac"
 
1) GFG Solution to get only count 

2) Leetcode Solution :

*/

1)  public:
    //Function to find length of shortest common supersequence of two strings.
    int shortestCommonSupersequence(string X, string Y, int m, int n)
    {
        vector<int>dp(n+1,0);
        for(int i=1;i<=m;i++){
            vector<int>temp(n+1,0);
            for(int j=1;j<=n;j++){
                if(X[i-1] == Y[j-1])
                    temp[j] = 1 + dp[j-1];
                else
                    temp[j] = max(dp[j],temp[j-1]);
            }
            dp = temp;
        }
        int lcs = dp[n];
        int ans = lcs + (m - lcs) + (n - lcs);
        return ans;
    }

2) class Solution {
public:
    string shortestCommonSupersequence(string str1, string str2) {
        int n = str1.length(),m = str2.length();
         vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(str1[i-1] == str2[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];
                else
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
            }
        }
        int scs_len = m + n - dp[n][m] ;       // scs Length
        string S = "";
	    int index = scs_len-1;
	    for(int i=0;i<scs_len;i++)  S += "$";       //Dummy Values.
	    int i=n,j=m;
	    while(i > 0 && j > 0){
	        if(str1[i-1] == str2[j-1]){
	            S[index--] = str1[i-1];
	            i--;
	            j--;
	        }
	        else if(dp[i-1][j] > dp[i][j-1]){
                S[index--] = str1[i-1];
	            i--;
	        }
	        else{
                S[index--] = str2[j-1];
	            j--;
	        }
	    }
        while(i > 0){
            S[index--] = str1[i-1];
            i--;
        }    
        while(j > 0){
            S[index--] = str2[j-1];
            j--;
        } 
	    return S;
    }
};
