/* Approach:
Given two strings 'str' and a wildcard pattern 'pattern' of length N and M respectively, You have to return '1' if the wildcard pattern is matched with str
else return '0' . All characters of the string str and pattern always belong to the Alphanumeric characters.
The wildcard pattern can include the characters ‘?’ and ‘*’
‘?’ – matches any single character.
‘*’ – Matches any sequence of characters (including the empty sequence).

1) Memoization : 
TC : O(N*M) SC : O(N*M) + O(N + M)
2) Tabulation :
TC : O(N*M) SC : O(N*M) 
3) Space Optimize :
TC : O(N*M) SC : O(M) 
4) 1-D array optimize : 
TC : O(N*M) SC : O(M) 
*/

1) private:
        bool cal(int idx1, int idx2 , string &pattern, string &str,vector<vector<int>>&dp){
            if(idx1 < 0 && idx2 < 0)    return true;
            if(idx1 < 0 && idx2 >=0)    return false;
            if(idx2 < 0 && idx1 >=0){
                for(int i=0;i<idx1;i++){
                    if(pattern[i] != '*')   
                        return false;
                }
                return true;
            }
            if(dp[idx1][idx2] != -1)    return dp[idx1][idx2];
            if(pattern[idx1] == str[idx2] || pattern[idx1] == '?')
                return dp[idx1][idx2] = cal(idx1-1,idx2-1,pattern,str,dp);
            if(pattern[idx1] == '*')
                return dp[idx1][idx2] = cal(idx1-1,idx2,pattern,str,dp) or cal(idx1,idx2-1,pattern,str,dp);
            return false;                //doesn't match the whole string in its entirity : so we return false
        }
    
    
  public:
    
    int wildCard(string pattern, string str) {
        int n = pattern.length(),m = str.length();
        vector<vector<int>>dp(n,vector<int>(m,-1));
        return cal(n-1,m-1,pattern,str,dp);
    }


2) 
