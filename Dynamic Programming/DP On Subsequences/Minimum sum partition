/* Approach:          [PATTERN : SUBSET SUM TABULATION]
Given an array arr of size n containing non-negative integers, the task is to divide it into two sets S1 and S2 such that the absolute difference
between their sums is minimum and find the minimum difference.

1) Tabulation : Same way as subset sum fill the tabulation : using the last row which consists of all the possible answer for each target value : we find s2 
and iterate throughout to find the minimum value.
TC : O(N*SUM) + O(SUM) : final array traversal SC : O(N*SUM)
2) Space Optimise :
TC : O(N*SUM) + O(SUM) : final array traversal SC : O(SUM)
*/

1) public:
	int minDifference(int arr[], int n)  { 
	    int sum = 0;
	    for(int i=0;i<n;i++)    sum += arr[i];
	    vector<vector<bool>>dp(n,vector<bool>(sum+1,false));
        for(int i=0;i<n;i++)    dp[i][0] = true;
        if(arr[0] <= sum)
            dp[0][arr[0]] = true;
        for(int i=1;i<n;i++){
            for(int tar=1;tar<=sum;tar++){
                bool notpick = dp[i-1][tar];
                bool pick = false;
                if(arr[i] <= tar)
                    pick = dp[i-1][tar-arr[i]];
                dp[i][tar] = pick or notpick; 
            }
        }
        int mini = 1e9;
        for(int s1=0;s1<=sum/2;s1++){
            if(dp[n-1][s1] == true){
                mini = min(mini,abs(s1 - (sum-s1)));
            }
        }
        return mini;
	} 


2) public:
	int minDifference(int arr[], int n)  { 
	    int sum = 0;
	    for(int i=0;i<n;i++)    sum += arr[i];
	    vector<bool>dp(sum+1,false);
        dp[0] = true;
        dp[arr[0]] = true;
        for(int i=1;i<n;i++){
            vector<bool>temp(sum+1,false);
            temp[0] = true;
            for(int tar=1;tar<=sum;tar++){
                bool notpick = dp[tar];
                bool pick = false;
                if(arr[i] <= tar)
                    pick = dp[tar-arr[i]];
                temp[tar] = pick or notpick; 
            }
            dp = temp;
        }
        int mini = 1e9;
        for(int s1=0;s1<=sum/2;s1++){
            if(dp[s1] == true){
                mini = min(mini,abs(s1 - (sum-s1)));
            }
        }
        return mini;
	} 
