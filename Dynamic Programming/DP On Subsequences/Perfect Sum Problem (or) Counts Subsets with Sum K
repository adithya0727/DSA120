/* Approach:          [Pattern : Subset Sum]
Given an array arr of size n of non-negative integers and an integer sum, the task is to count all subsets of the given array with a sum equal to a given sum.

1) Memoization : Here , instead of boolean values -> we need to count the number of paths : so at each stack frame we keep adding up till the final frame.
Also store at each point : [level(n),sum] : how many paths can we form : do that we can just re-use the sub-problems solution next we encounter it elsewhere.
TC : O(N*SUM)  SC : O(N*SUM) + O(N)  
2) Tabulation : 
TC : O(N*SUM)  SC : O(N*SUM)
3) Space optimise : 
TC : O(N*SUM)  SC : O(SUM)
*/

1) private:
        int cal(int arr[],vector<vector<int>>&dp,int n, int sum,int MOD){
            if(n==0){
            if(sum==0 && arr[0]==0) return 2;
            if(arr[0]==sum || sum==0) return 1;
            return 0;
            }
            if(dp[n][sum] != -1)    return dp[n][sum];
            int notpick = cal(arr,dp,n-1,sum,MOD);
            int pick = 0;
            if(arr[n] <= sum)   pick = cal(arr,dp,n-1,sum-arr[n],MOD);
            return dp[n][sum] = (pick + notpick)%MOD;
        }
    
	public:
	int perfectSum(int arr[], int n, int sum)
	{
	    const int MOD = 1e9 + 7;
        vector<vector<int>>dp(n,vector<int>(sum+1,-1));
        return cal(arr,dp,n-1,sum,MOD)%MOD;
	}


2) public:
	int perfectSum(int arr[], int n, int sum)
	{
	    const int MOD = 1e9 + 7;
        vector<vector<int>>dp(n,vector<int>(sum+1,0));
        for(int i=0;i<n;i++)    dp[i][0] = 1;
        if(arr[0] <= sum)
            dp[0][arr[0]] = 1;
        if(arr[0]==0)
            dp[0][0] = 2;
        for(int i=1;i<n;i++){
            for(int tar=0;tar<=sum;tar++){
                int notpick = dp[i-1][tar];
                int pick = 0;
                if(arr[i] <= tar)   pick = dp[i-1][tar-arr[i]];
                dp[i][tar] = (pick + notpick)%MOD;
            }
        }
        return dp[n-1][sum];
	}

3) public:
	int perfectSum(int arr[], int n, int sum)
	{
	    const int MOD = 1e9 + 7;
        vector<int>dp(sum+1,0);
        for(int i=0;i<n;i++)    dp[0] = 1;
        if(arr[0] <= sum)
            dp[arr[0]] = 1;
        if(arr[0]==0)
            dp[0] = 2;
        for(int i=1;i<n;i++){
            vector<int>temp(sum+1,0);
            for(int tar=0;tar<=sum;tar++){
                int notpick = dp[tar];
                int pick = 0;
                if(arr[i] <= tar)   pick = dp[tar-arr[i]];
                temp[tar] = (pick + notpick)%MOD;
            }
            dp = temp;
        }
        return dp[sum];
	}
	
