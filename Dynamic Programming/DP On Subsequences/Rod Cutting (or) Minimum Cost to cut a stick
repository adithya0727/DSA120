/* Approach :
Given a rod of length N inches and an array of prices, price[]. price[i] denotes the value of a piece of length i.
Determine the maximum value obtainable by cutting up the rod and selling the pieces.
Note: Consider 1-based indexing.

1) Memoization : Similarly using pick and non-pick method + Infinite Pattern.
TC : O(N*N+1)     SC : O(N*N+1) + O(N)   
2) Tabulation : Reverse of Memoization Traversal
TC : O(N*N+1)     SC : O(N*N+1)  
3) Space Optimization : use only 2 seperate vectors.
TC : O(N*N+1)     SC : O(N+1)  
4) 2nd level optimization : 1 Array Optimization.
TC : O(N*N+1)     SC : O(N+1)  

*/

1) private:
        int cal(int idx,int rodlen,int price[],vector<vector<int>>&dp){
            if(rodlen == 0)    return 0;
            if(idx == 0){
                return (rodlen*price[0]);
            }
            if(dp[idx][rodlen] != -1)    return dp[idx][rodlen];
            int notpick = cal(idx-1,rodlen,price,dp);
            int pick = INT_MIN;
            if(rodlen >= idx+1)     pick = price[idx] + cal(idx,rodlen-(idx+1),price,dp);
            return dp[idx][rodlen] = max(notpick,pick);
        }
    
  public:
    int cutRod(int price[], int n) {
        vector<vector<int>>dp(n,vector<int>(n+1,-1));
        return cal(n-1,n,price,dp);
    }

2) public:
    int cutRod(int price[], int n) {
        vector<vector<int>>dp(n,vector<int>(n+1,0));
        for(int i=0;i<=n;i++){
            dp[0][i] = i*price[0];
        }
        for(int idx=1;idx<n;idx++){
            for(int rodlen = 0;rodlen<=n;rodlen++){
                int notpick = dp[idx-1][rodlen];
                int pick = INT_MIN;
                if(rodlen >= idx+1)     pick = price[idx] + dp[idx][rodlen-(idx+1)];
                dp[idx][rodlen] = max(notpick,pick);
            }
        }
        return dp[n-1][n];
    }

3) public:
    int cutRod(int price[], int n) {
        vector<int>dp(n+1,0);
        for(int i=0;i<=n;i++){
            dp[i] = i*price[0];
        }
        for(int idx=1;idx<n;idx++){
            vector<int>temp(n+1,0);
            for(int rodlen = 0;rodlen<=n;rodlen++){
                int notpick = dp[rodlen];
                int pick = INT_MIN;
                if(rodlen >= idx+1)     pick = price[idx] + temp[rodlen-(idx+1)];
                temp[rodlen] = max(notpick,pick);
            }
            dp = temp;
        }
        return dp[n];
    }

4) public:
    int cutRod(int price[], int n) {
        vector<int>dp(n+1,0);
        for(int i=0;i<=n;i++){
            dp[i] = i*price[0];
        }
        for(int idx=1;idx<n;idx++){
            for(int rodlen = 0;rodlen<=n;rodlen++){
                int notpick = dp[rodlen];
                int pick = INT_MIN;
                if(rodlen >= idx+1)     pick = price[idx] + dp[rodlen-(idx+1)];
                dp[rodlen] = max(notpick,pick);
            }
        }
        return dp[n];
    }
