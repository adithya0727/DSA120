/* Approach:
You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a
circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected,
and it will automatically contact the police if two adjacent houses were broken into on the same night.
Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.
1) Slight variation from house robber 1 :
Since last and first house cannot be considered together , we perform house robber 1 solution TWICE : 1) excluding last house : we find maximum value possibility
2) excluding first house : we find maximum value possibility and then we find the max btw these two and that's our answer. We cover all possibilities as well , 
despite removing from each step.
time - space - O(N).
*/

1) private:
    int cal(vector<int>& nums,vector<int>&dp,int n){
        if(n == 0)  return nums[0];
        if(n < 0)   return 0;
        if(dp[n] != -1) return dp[n];
        int pick = nums[n] + cal(nums,dp,n-2);
        int nonpick = 0 + cal(nums,dp,n-1);
        return dp[n] = max(pick,nonpick);
    }

public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if(n==1)    return nums[0];
        vector<int>dp(n,-1);
        vector<int>dp1(n,-1);
        vector<int>temp1;
        vector<int>temp2;
        for(int i=1;i<n;i++)    temp1.push_back(nums[i]);    //all houses except first
        for(int i=0;i<n-1;i++)    temp2.push_back(nums[i]);  //all houses except last
        return max(cal(temp1,dp,n-2),cal(temp2,dp1,n-2));    //find the maximum among them.
    }
