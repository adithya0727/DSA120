/* Approach:

1) Recursion 
2) Memoization
3) Tabulation 
4) Space Optimized
time - O(N) 
space - O(N) and O(1) 
*/

1) private:
    int cal(int arr[] , int n){ 
        if(n == 0)  return arr[0];
        if(n < 0)   return 0;
        int pick = arr[n] + cal(arr,n-2);
        int notpick = 0 + cal(arr,n-1);
        return max(pick,notpick);
    }

public:	
	// calculate the maximum sum with out adjacent
	int findMaxSum(int *arr, int n) {
	    int result = cal(arr,n-1);
	    return result;
	}

2) private:
    int cal(int arr[] , vector<int>&dp , int n){
        if(n == 0)  return arr[0];
        if(n < 0)   return 0;
        if(dp[n] != -1)     return dp[n];
        int pick = arr[n] + cal(arr,dp,n-2);
        int notpick = 0 + cal(arr,dp,n-1);
        return dp[n] = max(pick,notpick);
    }

public:	
	// calculate the maximum sum with out adjacent
	int findMaxSum(int *arr, int n) {
	    vector<int>dp(n,-1);
	    int result = cal(arr,dp,n-1);
	    return result;
	}

3) 
	int findMaxSum(int *arr, int n) {
	    vector<int>dp(n,-1);
	    dp[0] = arr[0];
	    for(int i=1;i<n;i++){
	        int pick = INT_MIN;
	        if(i-2 >= 0)
	            pick = arr[i] + dp[i-2];
	        else
	            pick = arr[i] + 0;
	       int notpick = INT_MIN;
	        if(i-1 >= 0)
	            notpick = 0 + dp[i-1];
	        dp[i] = max(pick,notpick);
	    }
	    return dp[n-1];
	}

4) 
int findMaxSum(int *arr, int n) {
	    int first=arr[0],second=0;
	    for(int i=1;i<n;i++){
	        int pick = INT_MIN;
	        if(i-2 >= 0)
	            pick = arr[i] + second;
	        else
	            pick = arr[i] + 0;
	        int notpick = 0 + first;
	        second = first;
	        first = max(pick,notpick);
	    }
	    return first;
	}
