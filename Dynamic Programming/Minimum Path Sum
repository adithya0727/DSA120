/* Approach :
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.
Note: You can only move either down or right at any point in time.

1) Recursion : We start from the bottom : go till the base case and as we stack unwind and we start accumalting values from the base case , we store the minimum value 
at each location / dp[] and solve each sub-problem , by the time we reach destination : it has its minimum value stored there. Time : 2^(M*N) space - O(M*N) + O(M + N)
2) Memoization : time - O(N*M) space - O(M*N) + O(M + N)
3) Tabulation : time - O(N*M) space - O(M*N)
4) Space Optimization : time - O(N*M) space - O(N)
*/

1) private:
    int cal(vector<vector<int>>& grid,int row ,int col,int &m,int &n){
        if(row == 0 && col == 0){
            return grid[0][0];
        }
        if(row < 0 || col < 0)  return 1e9;
        int left=0,up=0;
        left = cal(grid,row,col-1,m,n) + grid[row][col];
        up = cal(grid,row-1,col,m,n) + grid[row][col];
        return min(left,up);
    }

public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size(),n=grid[0].size();
        int ans = cal(grid,m-1,n-1,m,n);
        return ans;
    }

2) private:
    int cal(vector<vector<int>>& grid,int row ,int col,int &m,int &n,vector<vector<int>>&dp){
        if(row == 0 && col == 0){
            return grid[0][0];
        }
        if(row < 0 || col < 0)  return 1e9;
        if(dp[row][col] != -1)  return dp[row][col];
        int left=0,up=0;
        left = cal(grid,row,col-1,m,n,dp) + grid[row][col];
        up = cal(grid,row-1,col,m,n,dp) + grid[row][col];
        return dp[row][col] = min(left,up);
    }

public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size(),n=grid[0].size();
        if(m==1 && n==1)    return grid[m-1][n-1];
        vector<vector<int>>dp(m,vector<int>(n,-1));
        cal(grid,m-1,n-1,m,n,dp);
        return dp[m-1][n-1];
    }

3) public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size(),n=grid[0].size();
        if(m==1 && n==1)    return grid[m-1][n-1];
        vector<vector<int>>dp(m,vector<int>(n,0));
        for(int row=0;row<m;row++){
            for(int col=0;col<n;col++){
                if(row == 0 && col == 0){
                    dp[0][0] = grid[0][0];
                    continue;
                }
                int left=0,up=0;
                if(col-1 < 0)   left = 1e9;
                else left = dp[row][col-1] + grid[row][col];
                if(row-1 < 0)   up = 1e9;
                else up = dp[row-1][col] + grid[row][col];
                dp[row][col] = min(left,up);    
            }
        }
        return dp[m-1][n-1];
    }

4) public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size(),n=grid[0].size();
        if(m==1 && n==1)    return grid[m-1][n-1];
        vector<int>dp(n,0);
        dp[0] = grid[0][0];
        for(int row=0;row<m;row++){
            vector<int>temp(n,0);
            for(int col=0;col<n;col++){
                if(row == 0 && col == 0){
                    temp[0] = grid[0][0];
                    continue;
                }
                int left=0,up=0;
                if(col-1 < 0)   left = 1e9;
                else left = temp[col-1] + grid[row][col];
                if(row-1 < 0)   up = 1e9;
                else up = dp[col] + grid[row][col];
                temp[col] = min(left,up);    
            }
            dp = temp;
        }
        return dp[n-1];
    }
