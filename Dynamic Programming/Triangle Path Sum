/* Approach:
Given a triangle array, return the minimum path sum to reach from top to bottom.
For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i
or index i + 1 on the next row.

1) Memoization : Starting point is fixed and ending is variable since we can get minimum value at any point in the last row : that's why we use starting point 
(0,0) as our initial point and go through all possibilities and get back the minimum. time - O(M*N) space - O(M*N) + O(M + N).
2) Tabulation : Since (0,0) is our initial point : we start building from the bottom-up approach : so we initialise the dp with all the variable last rows in dp
and then build upwards from there : all the way to the top. time - O(M*N) space - O(M*N).
3) Space Optimization : Same pattern.  time - O(M*N) space - O(N).
*/ 

1) private :
        int cal(vector<vector<int>>& triangle,int row,int col,int &n, vector<vector<int>>&dp){
            if(row == n-1)  return triangle[n-1][col];
            if(dp[row][col] != -1)  return dp[row][col];
            int down=0,downright=0;
            down = cal(triangle,row+1,col,n,dp) + triangle[row][col];
            downright = cal(triangle,row+1,col+1,n,dp) + triangle[row][col];
            return dp[row][col] = min(down,downright);
        }
    
  public:
    int minimizeSum(int n, vector<vector<int>>& triangle) {
        vector<vector<int>>dp(n,vector<int>(n,-1));
        int ans = cal(triangle,0,0,n,dp);
        return ans;
    }

2) public:
    int minimizeSum(int n, vector<vector<int>>& triangle) {
        if(n==1)    return triangle[0][0];
        vector<vector<int>>dp(n,vector<int>(n,-1));
        for(int row=n-1;row>=0;row--){
            for(int col=n-1;col>=0;col--){
                if(n-1 == row){
                    dp[n-1][col] = triangle[n-1][col];
                    continue;
                }
                int down=0,downright=0;
                down = triangle[row][col] + dp[row+1][col];
                downright = triangle[row][col] + dp[row+1][col+1];
                dp[row][col] = min(down,downright);
            }
        }
        return dp[0][0];
    }
3) public:
    int minimizeSum(int n, vector<vector<int>>& triangle) {
        if(n==1)    return triangle[0][0];
        vector<int>dp(n,0);
        for(int i=0;i<n;i++)    dp[i] = triangle[n-1][i];
        for(int row=n-1;row>=0;row--){
            vector<int>temp(n,0);
            for(int col=n-1;col>=0;col--){
                if(n-1 == row){
                    temp[col] = triangle[n-1][col];
                    continue;
                }
                int down=0,downright=0;
                down = triangle[row][col] + dp[col];
                downright = triangle[row][col] + dp[col+1];
                temp[col] = min(down,downright);
            }
            dp = temp;
        }
        return dp[0];
    }
