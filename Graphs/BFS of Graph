/* Approach :              [REFER BOOK FOR IN-DEPTH ALGORITHM ANALYSIS]
Given a directed graph. The task is to do Breadth First Traversal of this graph starting from 0.
1) INTUITION : We start traversing from an initial node , firstly we visit all the nodes that have edges connecting to the current node except the already
visited ones and we push them onto the queue and so on we take the FIFO element and push the neighbours similar to bfs of a tree and we return finally when the queue
is empty.
time - O(V + E) : Because we visit each node exactly once and each edge also exactly once [by using the visited array]
space - O(V) : to store all vertices in the result vector
2) Using a 2d Matrix : same as a backtracking problem.
time - O(N*M)  space - O(N*M)
*/

1) void bfs(vector<int> adj[],int startnode,vector<bool>&visited,vector<int>&res){
      queue<int>q;
      q.push(startnode);
      visited[startnode] = true;
      while(!q.empty()){
         int currentnode = q.front();
         q.pop();
         res.push_back(currentnode);
         for(auto &neighbour : adj[currentnode]){
             if(!visited[neighbour]){
                 visited[neighbour] = true;
                 q.push(neighbour);
             }
         }
      }
      return;
  }
  
  
    // Function to return Breadth First Traversal of given graph.
    vector<int> bfsOfGraph(int V, vector<int> adj[]) {
        vector<bool>visited(V,false);
        vector<int>res;
        bfs(adj,0,visited,res);
        return res;
    }


2) int dRow[] = { -1, 0, 1, 0 };
int dCol[] = { 0, 1, 0, -1 };
 
// Function to check if a cell
// is be visited or not
bool isValid(bool vis[][COL],
             int row, int col)
{
    // If cell lies out of bounds
    if (row < 0 || col < 0
        || row >= ROW || col >= COL)
        return false;
 
    // If cell is already visited
    if (vis[row][col])
        return false;
 
    // Otherwise
    return true;
}
 
// Function to perform the BFS traversal
void BFS(int grid[][COL], bool vis[][COL],
         int row, int col)
{
    // Stores indices of the matrix cells
    queue<pair<int, int> > q;
 
    // Mark the starting cell as visited
    // and push it into the queue
    q.push({ row, col });
    vis[row][col] = true;
 
    // Iterate while the queue
    // is not empty
    while (!q.empty()) {
 
        pair<int, int> cell = q.front();
        int x = cell.first;
        int y = cell.second;
 
        cout << grid[x][y] << " ";
 
        q.pop();
 
        // Go to the adjacent cells
        for (int i = 0; i < 4; i++) {
 
            int adjx = x + dRow[i];
            int adjy = y + dCol[i];
 
            if (isValid(vis, adjx, adjy)) {
                q.push({ adjx, adjy });
                vis[adjx][adjy] = true;
            }
        }
    }
}
