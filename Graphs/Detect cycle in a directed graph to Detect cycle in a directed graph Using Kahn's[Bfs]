/* Approach :                        [Same problem as topological sort using kahn's Algorithm]

1) intuition : If there exists a cycle in a graph : Rememeber that by using kahn's that at every point there used to be at least one parent ?
In this , if cycle exists : there will come one instance where there exists no cycle because these elements are dependent on each other and the queue will not run
fully. Therefore we use a count and check if the whole topo sort has not run , we found a cycle and return true , otherwise if it runs fully / normally : false [no cycle].
time - O(V + E) space - O(V)
*/
1) bool isCyclic(int V, vector<int> adj[]) {
        int count=0;
	    vector<int>InDeg(V,0);
	    for(int i=0;i<V;i++){
	        for(auto &var : adj[i]){
	            InDeg[var]++;
	        }
	    }
	    queue<int>q;
	    for(int i=0;i<V;i++){
	        if(InDeg[i]==0){
	            q.push(i);
	        }
	    }
	    while(!q.empty()){
	        int node = q.front();
	        count++;
	        q.pop();
	        for(auto &neighbour : adj[node]){
	            InDeg[neighbour]--;
	            if(InDeg[neighbour]==0)
	                q.push(neighbour);
	        }
	    }
	    if(count == V){    //key changes : if it ran fully : no cycle return false.
	        return false;
	    }
	    return true;    //didn't complete all vertices : return true : cycle exists.
    }
