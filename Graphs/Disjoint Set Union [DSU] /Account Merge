/* Approach:
Given a list of accounts where each element accounts [ i ] is a list of strings, where the first element account [ i ][ 0 ]  is a name,
and the rest of the elements are emails representing emails of the account.
Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts.
Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.
After merging the accounts, return the accounts in the following format: the first element of each account is the name,
and the rest of the elements are emails in sorted order.
1) INTUITION : Using DSU , we can determine the ult parent of each index and thereby UnionByRank them/connect them and based on the connection : we can merge them.
Breakdown :
1) We treat each account as a indeces. So they act as nodes for the DSU and they are initially parent to themselves.
2) Now , we use an unordered_map to store all the mail with their indeces.
3) While storing in the map if repeated mail id's are found : we perform a UnionByRank and connect these two indeces : to indicate that they are going to be merged.
4) and we continue and connect all those different accounts which may have even at least one same mail id.
5) Based on the connections : we use the ultimate parent to form the merged array : which contains the fianl merged mail id's for each user.
6) Now we have to restore the name of the user first in each of the array and their mail id's must be stored in sorted order : so use another ans to store it this way.
time - O(N*M*4Alpha) : to traverse throughout and performing UnionByRank.
space - O(N*M) : to store all the edges.
*/

1) class DisjointSet{
  private:
  vector<int>rank,parent;
  public:
  DisjointSet(int n){
      rank.resize(n+1,0);
      parent.resize(n+1);
      for(int i=0;i<=n;i++){
          parent[i] = i;
      }
  }
  
  int FindUPar(int node){
      if(parent[node] == node){
          return node;
      }
      return parent[node] = FindUPar(parent[node]);
  }
  
  void UnionByRank(int u , int v ){
      int ulp_u = FindUPar(u);
      int ulp_v = FindUPar(v);
      if(ulp_u == ulp_v)    return;
      if(rank[ulp_u] > rank[ulp_v]){
          parent[ulp_v] = ulp_u;
      }
      else if(rank[ulp_u] < rank[ulp_v]){
          parent[ulp_u] = ulp_v;
      }
      else{
          parent[ulp_v] = ulp_u;
          rank[ulp_u]++;
      }
  }
};


class Solution{
  public:
    vector<vector<string>> accountsMerge(vector<vector<string>> &accounts) {
        int n = accounts.size();  //these are the number of overall indeces initially.
        DisjointSet ds(n);  //initialise the nodes and thier parents to point to themselves.
        unordered_map<string,int>mp;  //mainly for tracking repeated mail id's.
        vector<string> mergedmails[n];  //to store all the mail id's in their corresponding places once they have been merged.
        vector<vector<string>>ans;
        
        for(int i=0;i<n;i++){
            for(int j=1;j<accounts[i].size();j++){  //edge case : except the name : we have to start from the next mail ids.
                string str = accounts[i][j];
                if(mp.find(str) != mp.end()){
                    ds.UnionByRank(i,mp[str]);  //if already exists : make a union among the nodes to denote who the ultimate parent is.
                    continue;
                }
                mp[str] = i;  //else , insert mail ids with their indeces. 
            }
        }
        
        for(auto &var : mp){  //traverse through the map to store in the correct merged manner.
            int ulp = ds.FindUPar(var.second);    //merge base on the ultimate parent for each mail id.
            mergedmails[ulp].push_back(var.first);
        }
        for(int i=0;i<n;i++){  // to store in sorted order + having the name first. : (Since use can't use push_front() in a vector).
            if(mergedmails[i].size() == 0)  continue;  //Skip if an array is empty (When it has been merged to a parent).
            sort(mergedmails[i].begin(),mergedmails[i].end());  //sort them.
            vector<string>temp;
            temp.push_back(accounts[i][0]);  //push the name for that particular index.
            for(auto &str : mergedmails[i]){  //then the rest sorted elements.
                temp.push_back(str);
            }
            ans.push_back(temp);    
        }
        return ans;
    }
};
