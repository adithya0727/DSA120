/* Approach:				[LOGIC : Similar to Prim's]
Given a weighted, undirected and connected graph of V vertices and E edges. The task is to find the sum of weights of the edges of the Minimum Spanning Tree.
Given adjacency list adj as input parameters .
Here adj[i] contains vectors of size 2, where the first integer in that vector denotes the end of the edge and the second integer denotes the edge weight.
Lets learn by comparing with prim's to get a better / deeper understanding of the solution => 
1) INTUITION : 
1a) So initially we sort the array based on the weights : so that we always consider the weights that are the minimum first to visit the unvisited nodes with 
minimum weight firstly.
1b) In prim's : We use a min_heap to do the following , by traversing through each neighbour : we would also consider the min weight first for the unvisited neighbours.
2a) We use DisjointSet : to check the nodes have same ultimate parent or not : if YES : then the nodes are already visited and we don't need to waste an edge and 
thereby consider it's weight , if no : then we make a connection using DSU by rank and count the weight.
2b) In this approach: we used a visited array to track this : if already visited we skipped that iteration , if not we add the minimum weight we get acc to min_heap
and continue to check minimum weighted neighbours.
3) Return the sum : it will always be the MST : since we consider all the minimum weight edges first and make them visited thereby taking only [N-1] edges.
time - O(MLogM) : to sort all the edges in the graph. O(M*4*Alpha) ~ O(M) : Overall : O(MlogM + M)
space - O(M + M + M) : to store parent and rank and edges vector : each with size same as edges.
*/

1) class DisjointSet{	//DSU By Rank.
  private:
  vector<int>rank,parent;
  public:
  DisjointSet(int n){
      rank.resize(n+1,0);
      parent.resize(n+1);
      for(int i=0;i<=n;i++){
          parent[i] = i;
      }
  }
  
  int FindUPar(int node){
      if(parent[node] == node){
          return node;
      }
      return parent[node] = FindUPar(parent[node]);
  }
  
  void UnionByRank(int u , int v ){
      int ulp_u = FindUPar(u);
      int ulp_v = FindUPar(v);
      if(ulp_u == ulp_v)    return;
      if(rank[ulp_u] > rank[ulp_v]){
          parent[ulp_v] = ulp_u;
      }
      else if(rank[ulp_u] < rank[ulp_v]){
          parent[ulp_u] = ulp_v;
      }
      else{
          parent[ulp_v] = ulp_u;
          rank[ulp_u]++;
      }
  }
};


class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        vector<pair<int,pair<int,int>>>edges;	//to store in such a way so that we can sort on the basis of weight and we traverse edges by edges for the DSU
        for(int i=0;i<V;i++){	//so that at each point , we can check for the connectedness of the graph which helps us determine visited or not.
            for(auto &vec : adj[i]){	//convert into {weight,{u,v}}
                edges.push_back({vec[1],{i,vec[0]}});
            }
        }
        sort(edges.begin(),edges.end());	//sort based on weights.
        int sum=0;	//final sum of MST.
        DisjointSet ds(V);	//create a object and initialise the size to V.
        for(auto &edge : edges){	//traverse through each of the edge.
            int weight = edge.first;	//store corresponding values.
            int u = edge.second.first;
            int v = edge.second.second;
            if(ds.FindUPar(u) == ds.FindUPar(v))    continue;	//if they are connected : [VISITED] => Skip this edge iteration.
            ds.UnionByRank(u,v);	//else connect the edges by DSU BY RANK.
            sum += weight;	//add the weight to the overall sum of the MST.
        }
        return sum;
    }
};
