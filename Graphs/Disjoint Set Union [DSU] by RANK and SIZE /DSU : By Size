/* Approach:
1) INTUITION : 
time - 
space -
*/


1) class DisjointSet{
  private:
  vector<int> size,parent;
  public:
  DisjointSet(int n){
      size.resize(n+1,0);
      parent.resize(n+1);
      for(int i=0;i<=n;i++){
          parent[i] = i;
      }
  }
  int FindUPar(int node){
      if(parent[node] == node){
          return node;
      }
      return parent[node] = FindUPar(parent[node]);
  }
  void UnionBySize(int u, int v){
      ulp_u = FindUPar(u);
      ulp_v = FindUPar(v);
      if(ulp_u == ulp_v)    return;
      if(size[ulp_u] < size[ulp_v]){
          parent[ulp_u] = ulp_v;
          size[ulp_v] += size[ulp_u];
      }
      else if(size[ulp_u] > size[ulp_v]){
          parent[ulp_v] = ulp_u;
          size[ulp_u] += size[ulp_v];
      }
      else{
          parent[ulp_v] = ulp_u;
          size[ulp_u] += size[ulp_v];
      }
  }
};


int main(){
    DisjointSet ds(3);
    ds.UnionBySize(1,2);
    ds.UnionBySize(2,3);
    ds.UnionBySize(1,3);
}
