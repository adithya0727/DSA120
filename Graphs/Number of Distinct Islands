/* Approach:
Given a boolean 2D matrix grid of size n * m. You have to find the number of distinct islands where a group of connected 1s (horizontally or vertically)
forms an island. Two islands are considered to be distinct if and only if one island is not equal to another (not rotated or reflected).
grid[][] = {{1, 1, 0, 0, 0},
            {1, 1, 0, 0, 0},
            {0, 0, 0, 1, 1},
            {0, 0, 0, 1, 1}}
Output:
1   [DFS]
1) INTUITION : Similar to number of islands : by searching for un-visited 1's at each point we traverse and perform a BFS/DFS. 
KEY POINT : use a set to keep track of all unique islands : we do this by using our source point as INITIAL POINT and subtract all connected nodes with this point.
so that we all connected points will have a same base point [0,0] and therefore it its a same island , the set will not store the repetitions.
time - O(N*M)
space - O(N*M)
2) [BFS]
*/

1) void dfs(vector<vector<int>>& grid,vector<vector<int>>&res,int i,int j,int &row,int &col,vector<int>&dx,        [DFS  ]
                vector<int>&dy,vector<pair<int,int>>&v,pair<int,int>&base){
                    res[i][j] = 0;
                    for(int k=0;k<4;k++){
                        int newdx = i + dx[k];
                        int newdy = j + dy[k];
                        if(newdx >=0 && newdx < row && newdy >=0 && newdy < col && grid[newdx][newdy]==1
                        && res[newdx][newdy]==1){
                            res[newdx][newdy] = 0;
                            v.push_back({newdx-base.first,newdy-base.second});
                            dfs(grid,res,newdx,newdy,row,col,dx,dy,v,base);
                        }
                    }
                    return;
                }
  
  
    int countDistinctIslands(vector<vector<int>>& grid) {
        int row=grid.size(),col=grid[0].size();                        //sizes
        set<vector<pair<int,int>>>s;      //to store only unique vectors which contains pairs(x,y) for each connected ISLAND                       
        vector<int>dx = {-1,0,1,0};            //to move along 4 directions
        vector<int>dy = {0,1,0,-1};
        vector<vector<int>>res = grid;            //to use as visited basically.
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){             //CONTROLLED BFS/DFS
                if(grid[i][j] == 1 && res[i][j] == 1){//if its an island and its not being visited , we've found a new island : find its neighbours
                    vector<pair<int,int>>v;
                    pair<int,int>base = {i,j};            //base value to which we subtract all the (x,y) to store in the vector and thus in the set.
                    dfs(grid,res,i,j,row,col,dx,dy,v,base);  //all neighbours
                    s.insert(v);   // we've got one island , which stores pairs which are from their base indexes to make it easier for us to remove DUPLICATES.
                }
            }
        }
        return s.size();            //all unique occurances of islands will be stored.
    }


2) void bfs(vector<vector<int>>& grid,vector<vector<int>>&res,int i,int j,int &row,int &col,vector<int>&dx,      [BFS]
                vector<int>&dy,vector<pair<int,int>>&v,pair<int,int>&base){
                    res[i][j] = 0;
                    queue<pair<int,int>>q;
                    q.push({i,j});
                    while(!q.empty()){
                        int x = q.front().first;
                        int y = q.front().second;
                        q.pop();
                    for(int k=0;k<4;k++){
                        int newdx = x + dx[k];
                        int newdy = y + dy[k];
                        if(newdx >=0 && newdx < row && newdy >=0 && newdy < col && grid[newdx][newdy]==1
                        && res[newdx][newdy]==1){
                            res[newdx][newdy] = 0;
                            v.push_back({newdx-base.first,newdy-base.second});
                            q.push({newdx,newdy});
                        }
                    }
                    }
                    return;
                }
  
  
    int countDistinctIslands(vector<vector<int>>& grid) {
        int row=grid.size(),col=grid[0].size();
        set<vector<pair<int,int>>>s;
        vector<int>dx = {-1,0,1,0};
        vector<int>dy = {0,1,0,-1};
        vector<vector<int>>res = grid;
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(grid[i][j] == 1 && res[i][j] == 1){
                    vector<pair<int,int>>v;
                    pair<int,int>base = {i,j};
                    bfs(grid,res,i,j,row,col,dx,dy,v,base);
                    s.insert(v);
                }
            }
        }
        return s.size();
    }
