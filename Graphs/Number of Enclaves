/* Approach :              [SAME PATTERN AS REPLACE O'S WITH X'S]
You are given an n x m binary matrix grid, where 0 represents a sea cell and 1 represents a land cell.
A move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid.
Find the number of land cells in grid for which we cannot walk off the boundary of the grid in any number of moves.
[BFS/DFS]
1) INTUITION : [BFS] => We find all the boundary 1's , as they can easily get off the grid and thus all the 1's connected to these boundary 1's are also valid 
and can walk off , therefore all the remaining 1's that ain't connected are counted as the ones that can't walk off.
time - O(N*M)
space - O(N*M)
2) [DFS]
*/

1) int numberOfEnclaves(vector<vector<int>> &grid) {                  [BFS]
        int row = grid.size(),col = grid[0].size();    //sizes
        vector<vector<int>>res = grid;    //act as visited and as our final result for count.
        queue<pair<int,int>>q;    //bfs
        int count=0;
        for(int i=0;i<col;i++){
            if(grid[0][i] == 1){    //all the rows : first row
                q.push({0,i});
                res[0][i] = 0;
            }
            if(grid[row-1][i] == 1){    //last row
                q.push({row-1,i});
                res[row-1][i] = 0;
            }
        }
        for(int j=0;j<row;j++){    //all the columns
            if(grid[j][0] == 1){    //first clolumn
                q.push({j,0});
                res[j][0] = 0;
            }
            if(grid[j][col-1] == 1){      //second column
                q.push({j,col-1});
                res[j][col-1] = 0;    //make them visited by marking them 0.
            }
        }
        vector<int>dx = {-1,0,1,0};    //move along 4 directions
        vector<int>dy = {0,1,0,-1};
        while(!q.empty()){
            int x = q.front().first;
            int y = q.front().second;
            q.pop();
            for(int k=0;k<4;k++){
                int newdx = x + dx[k];
                int newdy = y + dy[k];    //check for validity
                if(newdx>=0 && newdx < row && newdy >= 0 && newdy < col && grid[newdx][newdy] == 1 && res[newdx][newdy] == 1){
                    q.push({newdx,newdy});    //not visited and a land cell
                    res[newdx][newdy] = 0;
                }
            }
        }
        for(int i=0;i<row;i++){    //count of all remaining 1's which ain't connected to end of grid.
            for(int j=0;j<col;j++){
                if(res[i][j] == 1){
                    count++;
                }
            }
        }
        return count;
    }

2) void dfs(vector<vector<int>> &grid,int &count,int i,int j,int &row,int &col,vector<int>&dx,vector<int>&dy,vector<vector<int>>&res){  [DFS]
        res[i][j] = 0;
        for(int k=0;k<4;k++){
                int newdx = i + dx[k];
                int newdy = j + dy[k];
                if(newdx>=0 && newdx < row && newdy >= 0 && newdy < col && grid[newdx][newdy] == 1 && res[newdx][newdy] == 1){
                    dfs(grid,count,newdx,newdy,row,col,dx,dy,res);
                }
            }
            return;
    }
  
  
    int numberOfEnclaves(vector<vector<int>> &grid) {
        int row = grid.size(),col = grid[0].size();
        vector<vector<int>>res = grid;
        vector<int>dx = {-1,0,1,0};
        vector<int>dy = {0,1,0,-1};
        int count=0;
        for(int i=0;i<col;i++){
            if(grid[0][i] == 1){
                dfs(grid,count,0,i,row,col,dx,dy,res);
            }
            if(grid[row-1][i] == 1){
                dfs(grid,count,row-1,i,row,col,dx,dy,res);
            }
        }
        for(int j=0;j<row;j++){
            if(grid[j][0] == 1){
                dfs(grid,count,j,0,row,col,dx,dy,res);
            }
            if(grid[j][col-1] == 1){
                dfs(grid,count,j,col-1,row,col,dx,dy,res);
            }
        }
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(res[i][j] == 1){
                    count++;
                }
            }
        }
        return count;
    }
