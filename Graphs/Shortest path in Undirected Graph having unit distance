/* Approach:
You are given an Undirected Graph having unit weight,
Find the shortest path from src to all the vertex and if it is unreachable to reach any vertex, then return -1 for that vertex.
1) INTUITION : Regular bfs is performed , When a node is visited for the FIRST TIME , that itself will be the minimum weight , because if we keep going further
the unit distance will only increase. It is a LEVEL ORDER TRAVERSAL. So if a node is being touched for the first time : level size it is the only possible
shortest path , all others will only take more time , level order traverses in all directions [SPREADS].
time - O(N + E) 
space - O(N + E)
*/

1) vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){    
        vector<int> adj[N];  //store the adjList
        for(auto &v : edges){    
            adj[v[0]].push_back(v[1]);
            adj[v[1]].push_back(v[0]);
        }
        vector<int>weight(N,-1);    //initialise with -1 , since its unit distance minimum will be +1.
        weight[src] =0;// source is initialised with 0.
        queue<int>q;
        q.push(src);  //we start level order traversal from source.
        while(!q.empty()){
            int node = q.front();
            q.pop();
            for(auto &neighbour : adj[node]){    //traverse through all the edges.
                if(weight[neighbour] == -1){    //only if it visiting that weight for the first time.
                    weight[neighbour] = weight[node] +1;  //we assign the current node weight + 1 (to traval to this neighbour).
                    q.push(neighbour);    //and push the neighbour to further find next neighbours.
                }
            }
        }
        return weight;
    }
