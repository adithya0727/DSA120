/* Approach:                                    [PATTERN : KAHN'S ALGORITHM]
Given a sorted dictionary of an alien language having N words and k starting alphabets of standard dictionary.Find the order of characters in the alien language.
Input: 
N = 5, K = 4
dict = {"baa","abcd","abca","cab","cad"}
Explanation:
Here order of characters is 'b', 'd', 'a', 'c' Note that words are sorted and in the given language "baa" comes before "abcd", therefore 'b' is before 'a' in output.
question : words are sorted in the alien's dict , so we have to find the correct order of alphabets for the aliens , like for us its : a b c d e , similarly.
1) INTUITION : We pick pair of words together and compare them and find one pattern : at the junction where two elements are different : abc , adb 
we observe that b -> d , and store each of these patterns as a adjList. Disconnected components are handled on their own by kahn's.
K is the number of english alphabets that are used so that is our N here.
Once we get adjList and N and InDeg, using KAHN'S ALGORITHM SOLVE THE PROBLEM.
time - O(N + K)
space - O(N + K)
*/
EDGE CASE : 
1) ABCD , ABC : It will fail coz we will just traverse the larger number will be placed first which is wrong.
2) ABC , BAT , ABW : CYCLIC DEPENDENCY. B->A && A->B : FAIL.
1) vector<int> kahns(vector<int> adj[],int &K,vector<int>&InDeg){//regular kahn's algorithm
        queue<int>q;
        vector<int>res;
        for(int i=0;i<K;i++){
            if(InDeg[i]==0){
                q.push(i);
            }
        }
        while(!q.empty()){
            int node = q.front();
            res.push_back(node);
            q.pop();
            for(auto &neighbour : adj[node]){
                InDeg[neighbour]--;
                if(InDeg[neighbour]==0){
                    q.push(neighbour);
                }
            }
        }
        return res;
    }
    
    
    string findOrder(string dict[], int N, int K) {
        vector<int> adj[K];  //there are K total alphabets
        vector<int>InDeg(K,0);  //all indegree
        for(int i=0;i<N-1;i++){  //since we are comparing two strings , we end 1 iteration beforehand.
            string str1 = dict[i];  //grab two adjacent strings
            string str2 = dict[i+1];
            int mn = min(str1.length(),str2.length());  //only till the min length to avoid overflows.
            for(int j=0;j<mn;j++){
                if(str1[j] != str2[j]){    //until point of differentiation. , -'a' : to convert them to the integer form indexes to store in the AdjList.
                    adj[str1[j] - 'a'].push_back(str2[j] - 'a'); //since the alien dict is sorted , str1's comes before str2's always , so push accordingly.
                    InDeg[str2[j] - 'a']++;  //Indegree is the second string's character since str1->str2.
                    break;  //only one pattern can be found , beyond that we can't exactly pinpoint any pattern. So start with the next two str's from the outer loop.
                }
            }
        }
        vector<int>res = kahns(adj,K,InDeg);    //perform regular kahn's and we get a vector of int's containing the order.
        string ans = "";
        for(auto &var : res){  //convert back to thier char form
            ans += char(var + 'a');
        }
        return ans;
    }
