/* Approach:
Given a weighted, undirected and connected graph of V vertices and an adjacency list adj where adj[i] is a list of lists containing two integers
where the first integer of each list j denotes there is edge between i and j , second integers corresponds to the weight of that  edge .
You are given the source vertex S and You to Find the shortest distance of all the vertex's from the source vertex S.
You have to return a list of integers denoting shortest distance between each node and Source vertex S.
USING PRIORITY QUEUE
1) INTUITION : We use Min_heap to sort based on the Distance : so the shortest dist in on the top() and then we check for all their neighbours using the 
tentative shortest distance which will eventually mostly update all the vertices with mostly the shortest distance and its repeating anyways but only stores the min
distance.
time - O()
space - O()
USING SET
2) INTUITION : Literally same approach as previous , we use a set instead of min_heap , set also stores in ascending order so its helpful.
ONE MODIFICATION : if a vertex has already been visited , and we find a shorter distance to visit it , we erase the larger distance from the set to save some iterations.
time -
space -

*/

1) vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        vector<int>dist(V,INT_MAX);  //to store the MINIMUM distance to each VERTEX from the Given Source Node.
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>min_heap;  //to give us the current minimum distance at a current vertex position.
        dist[S] = 0;  //source in and itself is of 0 cost.
        min_heap.push({0,S});  //we start traversing from here.
        while(!min_heap.empty()){
            int currdist = min_heap.top().first;  //current distance at this vertex.
            int node = min_heap.top().second;    //current node we are at.
            min_heap.pop();  //pop 
            for(auto &neighbour : adj[node]){  //check for all their neighbours.
                int edge = neighbour[0];  //its neighbour 
                int weight = neighbour[1];  //the weight to travel from the current node to this neighbour.
                if(currdist + weight < dist[edge]){  //currdist travelled till now + weight it takes to travel to this neighbour : if it's lesser than neighbour's
                    dist[edge] = currdist + weight;  //current distance : then we update it and only then inserted in the min_heap for traversal.
                    min_heap.push({dist[edge],edge});
                }
            }
        }
        return dist;  
    }


2) vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        set<pair<int,int>>s;  //stores distance and vertex.
        s.insert({0,S});
        vector<int>dist(V,INT_MAX);  //distance at each node
        dist[S] = 0;  //initialise source to 0.
        while(!s.empty()){
            int currdist = s.begin()->first;  //since it uses BST implementation : so use iterators. : pick the FIRST SET element which will be the smallest.
            int node = s.begin()->second;  //the node
            s.erase(s.begin());  //remove the first element
            for(auto &neighbour : adj[node]){  //check all its neighbours
                int edge = neighbour[0];  //edge
                int edgeweight = neighbour[1];    //its weight
                if(currdist + edgeweight < dist[edge]){  //if dist till now + weight to move to the neighbour is lesser than curr dist in the edge
                    if(dist[edge]!=INT_MAX){// In case it's already been visited once and we find a smaller distance , erase the previous existing 
                        s.erase({dist[edge],edge});  //larger distance with same edge and replace with the smaller distance with new edge which saves some time.
                    }
                    dist[edge] = currdist + edgeweight;  //replace the smaller distance
                    s.insert({dist[edge],edge});  //push into set and check thier neighbours with this smaller distance now.
                }
            }
        }
        return dist;
    }
