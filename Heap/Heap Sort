/* Approach:        [IMPORTANT]
Given an array of size N. The task is to sort the array elements by completing functions heapify() and buildHeap() which are used to implement Heap Sort.
N = 5
arr[] = {4,1,3,9,7}
Output:
1 3 4 7 9
1) ALGORITHM:
1) First alter the array to make it such as that it follows MAXHEAP. (for each node=>i its corresponding left=>2*i+1 and right=>2*i+2 are smaller than itself).
2) Now , we iterate the array from the last to first :
      a) swap(max element(root=>maxheap),arr[i]: from the last element)
      b) the range of array is shortened now by -1 : last element is the maximum element and it is in its sorted position , so we don't consider that anymore.
      c) we perform MAXHEAPIFY : heapify based on maxheap condition , the elements are rearranged again and the max element is at the root again (full tree follows maxheap)
      d) a->b->c are repeated till the second element [first is not considered as we can't swap only one element=>lastly arr[0] and arr[1] are swapped].
step by step visualisation: EXAMPLE => {12, 11, 13, 5, 6, 7 }
step1 : Convert to a maxheap array : {13, 11, 12, 5, 6, 7}.
Repeat: 
step2 : {7, 11, 12, 5, 6, 13}    //swapping first and last
step3: {12, 11, 7, 5, 6 ,13}      //maxheapify to rectify the property
till we get sorted array :
{6, 11, 7, 5, 12 ,13} => {11,6, 7, 5, 12 ,13} => {5,6, 7, 11, 12 ,13} => {7,6,5,11,12,13} => {5,6,7,11,12,13}.
time - N*LogN => for each element(N) in the max_heap array : we perform max_heapify(LogN)
space - O(1)   =>recursive stack : O(LogN)
*/

1) void heapify(int arr[], int n, int i)  
    {
      int largest = i;
      int left = 2*i+1;
      int right = 2*i+2;
      if(left<n && arr[left] > arr[largest]){
          largest = left;
      }
      if(right<n && arr[right] > arr[largest]){
          largest = right;
      }
      if(largest!=i){
          swap(arr[i],arr[largest]);
          heapify(arr,n,largest);
      }
    }

    public:
    //Function to build a Heap from array.
    void buildHeap(int arr[], int n)  
    { 
    for(int i=n/2-1;i>=0;i--){
        heapify(arr,n,i);
    }
    }

    
    public:
    //Function to sort an array using Heap Sort.
    void heapSort(int arr[], int n)
    {
        if(n==0){
            return;
        }
        buildHeap(arr,n);
        for(int i=n-1;i>0;i--){
        swap(arr[0],arr[i]);
        
        heapify(arr,i,0);
    }
    }
