/* Approach:
Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).
Input: points = [[1,3],[-2,2]], k = 1
Output: [[-2,2]]
Explanation:
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].

1) So the KEY here : MINIMUM DISTANCE , we have to capture the k minimum distance from the origin(0,0).
So we use a maxheap and pop all elements that area farthest away from the origin and the remaining elements are pushed into vector. We dont necessarily have to use
sqrt() since it will be greater anyways.
time  - O(N*LogK) space - O(K)
*/

1) vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        priority_queue<pair<int,pair<int,int>>>p;
        vector<vector<int>>ans;
        for(int i=0;i<points.size();i++){
            int x = points[i][0];
            int y = points[i][1];
            int dist = sqrt(pow(x,2) + pow(y,2));
            p.push({dist,{x,y}});
            if(p.size() > k){
                p.pop();
            }
        }
        while(!p.empty()){
            auto q = p.top();
            vector<int>v;
            v.push_back(q.second.first);
            v.push_back(q.second.second);
            ans.push_back(v);
            p.pop();
        }
        return ans;
    }
