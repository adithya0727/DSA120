/* Approach:
Given a sorted array, arr[] of N integers, and a value X. Find the K closest elements to X in arr[].
Keep the following points in mind:
If X is present in the array, then it need not be considered.
If there are two elements with the same difference with X, the greater element is given priority.
If sufficient elements are not present on the right side then take elements from left and vice versa.

1) FUNDA : we use a pair<> , heap sorts usually based on p.first() , if there are more elements with p.first as same , p.second() higher values will be placed at the
top since its a max_heap.
so we sort() based on the abs() difference btw each element corresponding to the value X. the max difference elements will be pop()ed first at the top and we store
only upto k elements. 
the store the remaining k elements in vector and reverse them , since the lowest abs() ones are stored at the bottom.
we negate and re negate the arr[i] so that the max heap removes the smaller positive values when there is same abs() difference and the greater ones are provided priority
time - O(N*LogK) space - O(K)
*/

1) vector<int> printKClosest(vector<int> arr, int n, int k, int x) {
        vector<int>v;
        priority_queue<pair<int,int>>p;
        for(int i=0;i<n;i++){
            if(arr[i]==x){
                continue;
            }
            p.push({abs(arr[i]-x),-arr[i]});
            if(p.size() > k){
                p.pop();
            }
           
        }
        while(!p.empty()){
            auto q = p.top();
            v.push_back(-q.second);
            p.pop();
        }
        reverse(v.begin(),v.end());
        return v;
    }
