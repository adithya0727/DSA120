/* Approach:
There are given N ropes of different lengths, we need to connect these ropes into one rope. The cost to connect two ropes is equal to sum of their lengths.
The task is to connect the ropes with minimum cost. Given N size array arr[] contains the lengths of the ropes. 
arr[] = {4, 3, 2, 6}
Output: 
29
Explanation:
We can connect the ropes in following ways.
1) First connect ropes of lengths 2 and 3. Which makes the array {4, 5, 6}. Cost of this operation 2+3 = 5. 
2) Now connect ropes of lengths 4 and 5. Which makes the array {9, 6}. Cost of this operation 4+5 = 9.
3) Finally connect the two ropes and all ropes have connected. Cost of this operation 9+6 =15
Total cost for connecting all ropes is 5+ 9 + 15 = 29. This is the optimized costfor connecting ropes. 
Other ways of connecting ropes would always have same or more cost. For example, if we connect 4 and 6 first (we get three rope of 3,2 and 10), then connect 10 and 3 (we get
two rope of 13 and 2). Finally we connect 13 and 2. Total cost in this way is 10 + 13 + 15 = 38.

1) To find the MINIMUM COST => optimal solution : we always add the two of the LOWEST LENGTHS , so that we reduce the cost as much as possible.
Cause if we add the higher costs , we have to repeat and add more to the higher costs which makes the overall cost higher.
So we use a min heap , add top 2 min elements : and then reinsert the attached part to the min heap and it REHEAPIFIES , finds the lowest two once again and so on.
time - O(N*LogN) space - O(K) : store the whole list.
*/

1) long long minCost(long long arr[], long long n) {
        long long ans = 0;
        priority_queue<long long,vector<long long>,greater<long long>>p;
        for(int i=0;i<n;i++){
            p.push(arr[i]);
        }
        while(p.size() > 1){
            long long a = p.top();
            p.pop();
            long long b = p.top();
            p.pop();
            ans += a+b;
            p.push(a+b);
        }
        return ans;
    }
