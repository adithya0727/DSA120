/* Approach:
Given an array of n elements, where each element is at most k away from its target position, you need to sort the array optimally.
Example 1:
Input:
n = 7, k = 3
arr[] = {6,5,3,2,8,10,9}
Output: 2 3 5 6 8 9 10
Explanation: The sorted array will be
2 3 5 6 8 9 10
1) So basically each element will be at maximum k distance away (either left or right) from its correct position.
So , instead of sorting the whole array : we take a min_heap : store elements only uptil size k : there the top will be minimum element and we push to vector and pop from heap.
Finally push all remaining elements.
time -  space - 
*/

1) vector <int> nearlySorted(int arr[], int num, int K){
        vector<int>v;
        priority_queue<int,vector<int>,greater<int>>p;
        for(int i=0;i<num;i++){      //for each element , until k distance we insert into the heap : we are bound to find the lowest element at the top and so on..
            p.push(arr[i]);
            if(p.size() > K){    //min element found in this k range and so on
                v.push_back(p.top());
                p.pop();
            }
        }
        while(!p.empty()){      //remaining elements of size k in heap is pushed back to vector at the end.
            v.push_back(p.top());
            p.pop();
        }
        return v;
    }
