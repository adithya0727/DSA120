/* Approach:
Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and uses only constant extra space.
Example 1:
Input: nums = [1,3,4,2,2]
Output: 2
1) lets approach it this way : range is always btw 1->n and the size is n+1. we know that there is only one element that is repeated more than once and we need to find that.
so , instead of looking at the array as values inside , LETS LOOK AT THEM AS POINTERS.
we shall draw a linked list in our head visually and we use the array elements within to move across the array.
if a repeated number is encountered , fast will start MOVING IN A LOOP FASHION FOLLOWING THE ARRAY VALUES AND EVENTUALLY THE FAST AND SLOW MEET. 
BASCIALLY , VISUALISE THE FLOYDS CYCLE AND THEN MOVE THEM AT THE SAME PACE TO GET THE STARTING POINT OF THE LOOP. thats where the repeated element is.
*/

1) int findDuplicate(vector<int>& nums) {
        int slow = nums[0],fast=nums[nums[0]];    //starting pointer
        while(slow!=fast){
            slow = nums[slow];    //iterating one step at a time
            fast = nums[nums[fast]];    //iterating the same steps the slow will follow eventaully , but at TWICE the rate.
        }  
        slow=0;      //restart any one pointer
        while(slow!=fast){      //move at the same pace to get the starting point.
            slow = nums[slow];    
            fast = nums[fast];
        }
        return fast;      //return any of the pointers.
    }
