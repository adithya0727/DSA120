/* Approach:
Given two singly linked lists of size N and M, write a program to get the point where two linked lists intersect each other.
Example 1:
Input:
LinkList1 = 3->6->9->common
LinkList2 = 10->common
common = 15->30->NULL
Output: 15
1) O(N^2) : Brute force : traversing head1 as the outer loop and traversing head2 as the inner loop.
For each head2 inner loop we compare with the outer loop and check if both the nodes are equal : if they are at any point return the head->data.
2) time and space : O(N)
HASH-MAP SOLUTION : First we run through one of the ll and store all the nodes in a hashmap. Then we run the .find() on head2 to find if any node of head2 is 
present in the map : if so return true else false.
3) time : O(N) , space : O(1).
[MOST OPTIMAL SOLUTION] => TWO POINTERS
So we have two pointer : initially one is pointing to head1 and other is pointing to head2.
we iterate and once they reach the end ptr1 goes to head2 and ptr2 goes to head1 and we iterate through them again and again : if they meet they intersesct else they dont.
IMP : /* Once both of them go through reassigning,
        they will be equidistant from the collision point.*/
*/

1) Node* getIntesectionNode(Node* head1, Node* head2)
{
    while (head2) {
        Node* temp = head1;
        while (temp) {
            // if both Nodes are same
            if (temp == head2)
                return head2;
            temp = temp->next;
        }
        head2 = head2->next;
    }
    // intersection is not present between the lists
    return NULL;
}
2) // function to find the intersection point of two lists
void MegeNode(Node* n1, Node* n2)
{
    unordered_set<Node*> hs;
    while (n1 != NULL) {
        hs.insert(n1);
        n1 = n1->next;
    }
    while (n2) {
        if (hs.find(n2) != hs.end()) {
            cout << n2->data << endl;
            break;
        }
        n2 = n2->next;
    }
}

3) int intersectPoint(Node* head1, Node* head2)
{
    Node *ptr1 = head1;
    Node *ptr2 = head2;
    Node *ans = NULL;
    if(ptr1 == NULL || ptr2 == NULL){        //base case if any ll is empty
        return -1;
    }
    while(ptr1!=ptr2){                  //until they don't meet
        ptr1 = ptr1->next;
        ptr2 = ptr2->next;
        if(ptr1 == ptr2){           //they meet on two conditions : 1) no intersection : they meet at NULL and break , if intersection happens : ans = intersection node.
            ans = ptr1;              // NULL or node
            break;
        }
        
        if(ptr1 == NULL){      //pointer to next head
            ptr1 = head2;
        }
        
        
        if(ptr2 == NULL){      //pointer to next head
            ptr2 = head1;
        }
    }
    if(ans == NULL){        //if null : -1
        return -1;
    }
    else{
        return ans->data;      // if node : return that data
    }
}
