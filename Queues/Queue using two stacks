/* Approaches : 
1) Costly Enqueue : 
two stacks s1 and s2. first push all elements from s1 and s2 , push new element to empty s1 and then push back all elements from s2 to s1 (having the latest inserted element at the last position).
2) costly Dequeue : 
two stacks s1 and s2. simple 0(1) push operation on s1. if both s1 and s2 are empty return -1 , if and only if s2 is empty -> push all s1->s2.
return s2.top() and s2.pop() to remove latest element. once s2 becomes empty again , push the next set of elements that are stored in s1.

*/




1) void StackQueue :: push(int x)
{
    while(!s1.empty()){
        s2.push(s1.top());
        s1.pop();
    }
    s1.push(x);
    while(!s2.empty()){
        s1.push(s2.top());
        s2.pop();
    }
    
}

//Function to pop an element from queue by using 2 stacks.
int StackQueue :: pop()
{
    if(s1.empty()){
        return -1;
    }          
    int tops = s1.top();
    s1.pop();
    return tops;
}



2) void StackQueue :: push(int x)
{
    s1.push(x);
    
}

//Function to pop an element from queue by using 2 stacks.
int StackQueue :: pop()
{
    while(s1.empty() && s2.empty()){
        return -1;
    }
    if(s2.empty()){
        while(!s1.empty()){
            s2.push(s1.top());
            s1.pop();
        }
    }
    int tops = s2.top();
    s2.pop();
    return tops;
}
