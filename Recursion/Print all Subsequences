/* Approach :
1) Firstly we start with drawing a recursive tree : Intuition => we observe that we have a choice + decision pattern here , which means we could draw a tree.
Based on the tree , we can observe that the leaf nodes has all the outputs we want and thus thats the BASE case.
Each time we go lower height of the tree , we Shorten the input and then perform a decision on that input (yes/no).
Perform recursive calls on each of these inputs : output is copied each time top op12 and op2 , as we are carrying the outputs from the previous height of tree.
If i dont want to print , but want to store the results in a vector : always REMEMBER : USE REFERENCE IN THE CALL FUNCTION TO USE THE SAME COPY OF VECTOR AT EACH
CALL STACK.
*/


1) void solve(string input, string output, vector<string> &result) {
    if (input.length() == 0) {
       if(output == ""){
           return;
       }
            result.push_back(output);
       
        return;
    }
    string op1 = output;
    string op2 = output;
    op2.push_back(input[0]);
    input.erase(input.begin()+0);
    solve(input,op1,result);
    solve(input,op2,result);

  
}

vector<string> AllPossibleStrings(string s) {
    vector<string> result;
    solve(s, "", result);

    // Sort the result vector lexicographically
    sort(result.begin(), result.end());

    return result;
}

