/* Approach:
1) first step: use a hashmap to store frequencies of elements and then'
we check if it is equal to the map.size() , if yes , all are unique to the size window and then we check for max and store in mx.
if no, we use a while loop until we get map size equal to window size and then finally return mx.


*/


1) int lengthOfLongestSubstring(string s) {
        int i=0,j=0,mx=INT_MIN;
        if(s.length()==0)
            return 0;
        unordered_map<char,int>m;
        while(j<s.length()){
            m[s[j]]++;
            if(m.size() == j-i+1){
                mx = max(mx,j-i+1);
                
            }
            else if(m.size() < j-i+1){
                while(m.size() < j-i+1){
                    m[s[i]]--;
                    if(m[s[i]] == 0){
                        m.erase(s[i]);
                    }
                    i++;
                }
                
            }
           j++; 
        }
        return mx;
    }
