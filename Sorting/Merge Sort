/* Approach:
time : O(NLOGN) Space : O(N)
1) MergeSort Function : 
Base Case : if at any point left >= right : then we return and go back to the previous STACK FRAME.
first we find mid and pass that as a parameter : (left,mid) -> to move towwards the left subarray and then (mid+1,right) -> to move towards the right part of the subarray : Basically the problem is recursively 
broken down all the way until one element is remaining. adn then we return to the previous stack frame and preform merge. Simliarly we get getting to prev stack frames and merging various merged sorted sub arrays
together. READ BREAKDOWN.
*/

1) void merge(int arr[], int l, int m, int r)
    {
         int const subarrayone = m-l+1;       //stores the size of left part of subarray
         int const subarraytwo = r-m;        //stores the size of right part of subarray
         int subone=0,subtwo=0,mainindex=l;    //helps for iteration and the mainindex (where we start storing information is from the current leftmost index)
         auto *leftarray = new int[subarrayone];    //create a left array
         auto *rightarray = new int[subarraytwo];    //create a right array
         for(int i=0;i<subarrayone;i++){          //fill in details : from the leftpart
             leftarray[i] = arr[l+i];
         }
         for(int j=0;j<subarraytwo;j++){
             rightarray[j] = arr[m+1+j];        //fill in details from the right part
         }
         while(subone < subarrayone && subtwo < subarraytwo){      //comparison btw left and right : the SMALLER one is considered and iterated forward
             if(leftarray[subone] <= rightarray[subtwo]){
                 arr[mainindex] = leftarray[subone];
                 subone++;
             }
             else{
                 arr[mainindex] = rightarray[subtwo];
                 subtwo++;
             }
             mainindex++;
         }
         while(subone < subarrayone){        //if there are any elements remaining in the left part
             arr[mainindex] = leftarray[subone];  
             subone++;
             mainindex++;
         }
         while(subtwo < subarraytwo){          //if there are any elements remaining in the right part
             arr[mainindex] = rightarray[subtwo];
             subtwo++;
             mainindex++;
         }  
         delete[] leftarray;                    //delete arrays
         delete[] rightarray;
    }
    public:
    void mergeSort(int arr[], int l, int r)
    {
        if(l >= r){                  //base case
            return;
        }
        int mid = l + (r-l)/2;        //find mid
        mergeSort(arr,l,mid);          //left subarray recursive tree.
        mergeSort(arr,mid+1,r);            //right subarrray recursive tree.
        merge(arr,l,mid,r);              //finally merge.
    }


VISUALIZATION : {3,1,2,4}
                mergeSort(0, 3)
                 /            \
  mergeSort(0, 1)             mergeSort(2, 3)
   /          \                /          \
mergeSort(0, 0) mergeSort(1, 1) mergeSort(2, 2) mergeSort(3, 3)
     |            |               |             |
    merge(0, 0, 1)  merge(2, 2, 3)             |
                 \              /
                  merge(0, 1, 3)
