/* Approach:
Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9
1) using a STACK of integers : if we encounter an operand we keep pushing it onto the stack , 
else : if we encounter an operator : use take the last two operands by poping and use the appropriate sign and push the answer back into the stack and move on.

*/

1) int evalRPN(vector<string>& tokens) {
        int op1,op2,ans;
        stack<int>s;
        for(int i=0;i<tokens.size();i++){
            if(tokens[i] == "+" ||tokens[i] == "-" || tokens[i] == "*" || tokens[i] == "/"){
                op2 = s.top();
                s.pop();
                op1 = s.top();
                s.pop();
                if(tokens[i] == "+")
                    ans = op1 + op2;
                if(tokens[i] == "-")
                    ans = op1 - op2;
                if(tokens[i] == "*")
                    ans = op1 * op2;
                if(tokens[i] == "/")
                    ans = op1 / op2;
                
                s.push(ans);
            }
            else{
                s.push(stoi(tokens[i]));
            }
        }
        return s.top();
    }
