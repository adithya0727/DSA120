/*Approach:
Given a binary matrix M of size n X m. Find the maximum area of a rectangle formed only of 1s in the given matrix.
Input:
n = 4, m = 4
M[][] = {{0 1 1 0},
         {1 1 1 1},
         {1 1 1 1},
         {1 1 0 0}}
Output: 8
1) Same approach till finding the Maximum Area Histogram.
so its a binary matrix: 
algorithm :
1) first it is a 2D array : so we convert it to a 1D array. visualise : {vector1,vector2,vector3,vector4,vector5};
how ? => first we take the first vector and insert it as it is. follow step 2.
next => use perform a MxN across all elements from the second vector : if we encounter 1 , we add +1 else : if we encounter a 0 : it means THE BUILDING IS IN AIR
THEREFORE , WE MUST CONSIDER IT COMPLETELY AS A 0. After each vector is being modified and updated we perform mah and check for maximum.
2) Mah on each of the histograms that we construct (or we keep adding on).
3) maximum of the mah's of each histograms is the final output.

2) NO TLE APPROACH
*/

1) vector<int> nsl1(vector<int>&arr , int n){              //Nearest smaller Left
        vector<int>nsl;
        stack<pair<int,int>>st1;
        for(int i=0;i<n;i++){
            if(st1.empty()){
                nsl.push_back(-1);
            }
            else if(st1.size() > 0 && st1.top().first < arr[i]){
                nsl.push_back(st1.top().second);
            }
            else if(st1.size() > 0 && st1.top().first >= arr[i]){
                while(st1.size() > 0 && st1.top().first >= arr[i]){
                    st1.pop();
                }
                if(st1.size() == 0){
                    nsl.push_back(-1);
                }
                else{
                    nsl.push_back(st1.top().second);
                }
            }
            st1.push({arr[i],i});
        }
        return nsl;
    }
    vector<int> nsr1(vector<int>&arr , int n){             //Nearest Smaller Right
        vector<int>nsr;
        stack<pair<int,int>>st2;
        for(int j=(n-1);j>=0;j--){
            if(st2.empty()){
                nsr.push_back(n);
            }
            else if(st2.size() > 0 && st2.top().first < arr[j]){
                nsr.push_back(st2.top().second);
            }
            else if(st2.size() > 0 && st2.top().first >= arr[j]){
                while(st2.size() > 0 && st2.top().first >= arr[j]){
                    st2.pop();
                }
                if(st2.size() == 0){
                    nsr.push_back(n);
                }
                else{
                    nsr.push_back(st2.top().second);
                }
            }
            st2.push({arr[j],j});
        }
        reverse(nsr.begin(),nsr.end());
        return nsr;
    }
  
    int mah(vector<int>&v , int n){              //Calculate MAH
        vector<int> nsl = nsl1(v,n);
        vector<int> nsr = nsr1(v,n);
        vector<int>width(n);
        for(int a=0;a<n;a++){
            width.push_back((nsr[a] - nsl[a] - 1) * v[a]);
        }
        //Final answer
        int ans = *max_element(width.begin(), width.end());
        nsl.clear();
        nsr.clear();
        return ans;
    }
  
  
  
    int maxArea(int M[MAX][MAX], int n, int m) {
        vector<int>v;
        int mx=0,ans=0;
        for(int j=0;j<m;j++){        //First vector insertion
            v.push_back(M[0][j]);
        }
        mx = mah(v,m);
        ans = mx;
        for(int i=1;i<n;i++){               //Perform MxN on all vectors
            for(int j=0;j<m;j++){
                if(M[i][j] == 1){          // Check for condition
                    v[j] = v[j] + 1;
                }
                else{
                    v[j] = 0;
                }
            }
            mx = mah(v,m);
            ans = max(mx,ans);
        }
        return ans;            //Return maximum
    }
2) NO TLE APPROACH :                             // to remove TLE prefer "VOID" over "INT" , TERNARY OVER IF-ELSE.
void nsl1(vector<int>& arr, int n, vector<int>& nsl) {
        stack<pair<int, int>> st1;
        for (int i = 0; i < n; i++) {
            while (!st1.empty() && st1.top().first >= arr[i]) {
                st1.pop();
            }
            nsl[i] = (st1.empty()) ? -1 : st1.top().second;
            st1.push({arr[i], i});
        }
    }

    void nsr1(vector<int>& arr, int n, vector<int>& nsr) {
        stack<pair<int, int>> st2;
        for (int j = n - 1; j >= 0; j--) {
            while (!st2.empty() && st2.top().first >= arr[j]) {
                st2.pop();
            }
            nsr[j] = (st2.empty()) ? n : st2.top().second;
            st2.push({arr[j], j});
        }
    }

    int mah(vector<int>& v, int n, vector<int>& nsl, vector<int>& nsr) {
        int ans = 0;
        for (int a = 0; a < n; a++) {
            int width = nsr[a] - nsl[a] - 1;
            ans = max(ans, width * v[a]);
        }
        return ans;
    }

    int maxArea(int M[MAX][MAX], int n, int m) {
        vector<int> v(m, 0);
        vector<int> nsl(m);
        vector<int> nsr(m);
        int mx = 0, ans = 0;

        for (int j = 0; j < m; j++) {
            v[j] = M[0][j];
        }

        nsl1(v, m, nsl);
        nsr1(v, m, nsr);
        mx = mah(v, m, nsl, nsr);
        ans = mx;

        for (int i = 1; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (M[i][j] == 1) {
                    v[j] = v[j] + 1;
                } else {
                    v[j] = 0;
                }
            }

            nsl1(v, m, nsl);
            nsr1(v, m, nsr);
            mx = mah(v, m, nsl, nsr);
            ans = max(mx, ans);
        }

        return ans;
    }
