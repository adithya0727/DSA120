/* Approach:
Find the largest rectangular area possible in a given histogram where the largest rectangle can be made of a number of contiguous bars.
For simplicity, assume that all bars have the same width and the width is 1 unit, the height of each bar will be given by the array arr.

1) first we understand the probelm statement.
we see that , to find the maximum area , we have to choose each rectangular box(or each array element) and find their nearest smaller on the left side and the right
side : then subtract those two indices to get the width until which we can stretch and multiply with the height of that particular array element.
finally , see which has the maximum area and return that.
it is a combination of NSR AND NSL with indeces(so that if we pop , we still have the indeces to rely on).
Leetcode : HARD.
2) NO TLE APPROACH.         //JUST USE ONE STACK
*/

1) long long getMaxArea(long long arr[], int n)
    {
        long long ans=0;
        vector<long long>nsl;
        vector<long long>nsr;
        vector<long long>width;
        stack<pair<long long,int>>st1;
        stack<pair<long long,int>>st2;   
        //Nearest Smaller Left
        for(int i=0;i<n;i++){
            if(st1.empty()){
                nsl.push_back(-1);
            }
            else if(st1.size() > 0 && st1.top().first < arr[i]){
                nsl.push_back(st1.top().second);
            }
            else if(st1.size() > 0 && st1.top().first >= arr[i]){
                while(st1.size() > 0 && st1.top().first >= arr[i]){
                    st1.pop();
                }
                if(st1.size() == 0){
                    nsl.push_back(-1);
                }
                else{
                    nsl.push_back(st1.top().second);
                }
            }
            st1.push({arr[i],i});
        }
        //Nearest Smaller Right
        for(int j=(n-1);j>=0;j--){
            if(st2.empty()){
                nsr.push_back(n);
            }
            else if(st2.size() > 0 && st2.top().first < arr[j]){
                nsr.push_back(st2.top().second);
            }
            else if(st2.size() > 0 && st2.top().first >= arr[j]){
                while(st2.size() > 0 && st2.top().first >= arr[j]){
                    st2.pop();
                }
                if(st2.size() == 0){
                    nsr.push_back(n);
                }
                else{
                    nsr.push_back(st2.top().second);
                }
            }
            st2.push({arr[j],j});
        }
        reverse(nsr.begin(),nsr.end());
        //Calculate Width
        for(int a=0;a<n;a++){
            width.push_back((nsr[a] - nsl[a] - 1) * arr[a]);
        }
        //Final answer
        ans = *max_element(width.begin(), width.end());
        return ans;
    }

2) long long getMaxArea(long long arr[], int n)    /use only 1 stack
    {
        long long ans=0;
        vector<long long>nsl;
        vector<long long>nsr;
        vector<long long>width;
        stack<pair<long long,int>>st;
        //Nearest Smaller Left
        for(int i=0;i<n;i++){
            if(st.empty()){
                nsl.push_back(-1);
            }
            else if(st.size() > 0 && st.top().first < arr[i]){
                nsl.push_back(st.top().second);
            }
            else if(st.size() > 0 && st.top().first >= arr[i]){
                while(st.size() > 0 && st.top().first >= arr[i]){
                    st.pop();
                }
                if(st.size() == 0){
                    nsl.push_back(-1);
                }
                else{
                    nsl.push_back(st.top().second);
                }
            }
            st.push({arr[i],i});
        }
        while(!st.empty()){
            st.pop();                               //emoty stack for reusing
        }
        //Nearest Smaller Right
        for(int j=(n-1);j>=0;j--){
            if(st.empty()){
                nsr.push_back(n);
            }
            else if(st.size() > 0 && st.top().first < arr[j]){
                nsr.push_back(st.top().second);
            }
            else if(st.size() > 0 && st.top().first >= arr[j]){
                while(st.size() > 0 && st.top().first >= arr[j]){
                    st.pop();
                }
                if(st.size() == 0){
                    nsr.push_back(n);
                }
                else{
                    nsr.push_back(st.top().second);
                }
            }
            st.push({arr[j],j});
        }
        reverse(nsr.begin(),nsr.end());
        //Calculate Width
        for(int a=0;a<n;a++){
            width.push_back((nsr[a] - nsl[a] - 1) * arr[a]);
        }
        //Final answer
        ans = *max_element(width.begin(), width.end());
        return ans;
    }
