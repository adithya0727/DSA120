/*Approach :
N = 4, arr[] = [1 3 2 4]
Output:
-1 -1 3 -1
Explanation:
In the array, the next larger element 
to 1 is -1 , 3 is -1 , 2 is 3 and for 4 - -1; 
if it doesn't exist, it is -1.
1) So we start by iterating from the first. According to pattern : array with O(N^2) and j is dependent on i , so we use a stack.
edge cases : if empty then push -1 , else if : check if top is greater , if yes then replace , else if => top is lesser : then keep popping until we get a 
greater value or stack becomes empty. Finally push the arr[i] element into the stack.
*/

1) vector<long long> nextLargerElement(vector<long long> arr, int n){
        vector<long long>v;
        stack<long long>st;
        for(int i=0;i<n;i++){
            if(st.empty()){
                v.push_back(-1);
            }
            else if(st.size() > 0 && st.top() > arr[i]){
                v.push_back(st.top());
            }
            else if(st.size() > 0 && st.top() <= arr[i]){
                while(st.size() > 0 && st.top() <= arr[i]){
                    st.pop();
                }
                if(st.size() == 0){
                    v.push_back(-1);
                }
                else{
                    v.push_back(st.top());
                }
            }
            st.push(arr[i]);
        }
        reverse(v.begin(),v.end());
        return v;
    }
