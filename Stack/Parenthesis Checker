/* Approach :
1) here , we use a stack firstly to insert all char's which are opening braces and then slowly check with each top element if its corresponding value is its opposite and we keep poping them ,otherwise we return false.
learnt about two failed cases : when only insert is performed -> returned true which is false. to rectify : we check the empty()ness | delete without insert -> if deleting with s being empty() : return false.

*/


1) bool ispar(string x)
    {
       
        stack<char>s;
        for(int i=0;i<x.length();i++){
            if(x[i] == '{' || x[i] == '(' || x[i] == '[' ){
                s.push(x[i]);
            }
            else if(!s.empty() && s.top() == '['){
                if(x[i] == ']'){
                    s.pop();
                }
                else{
                    return false;
                }
            }
            else if(!s.empty() && s.top() == '('){
                if(x[i] == ')'){
                    s.pop();
                }
                else{
                    return false;
                }
            }
            else if(!s.empty() && s.top() == '{'){
                if(x[i] == '}'){
                    s.pop();
                }
                else{
                    return false;
                }
            
            }
            else if(s.empty() && x[i] == ')' || x[i] == ']' || x[i] == '}'){
                return false;
            }
        }
        if(!s.empty()){
            return false;
        }
        return true;
    }
