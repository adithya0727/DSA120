/* Approach:
https://practice.geeksforgeeks.org/problems/stock-span-problem-1587115621/1
The stock span problem is a financial problem where we have a series of n daily price quotes for a stock and we need to calculate the span of stocks price for all n days. 
The span Si of the stocks price on a given day i is defined as the maximum number of consecutive days just before the given day, for which the price of the stock on the given day is less than or equal to its price on the current day.
For example, if an array of 7 days prices is given as {100, 80, 60, 70, 60, 75, 85}, then the span values for corresponding 7 days are {1, 1, 1, 2, 1, 4, 6}.

1) Same PATTERN AS GREATEST ELEMENT FROM LEFT. no reverse , loop starts with i=0 and ends when it hits base case or max element is found.
changes : Here we create a vector to store all indexes of maximum element for that element in position using pair<int,int>
once we get all indexes of max elements , we then subtract it with normal 0->n indexes to get the window size of the CONSEQUTIVE smaller elements till greater element.
*/


1) vector <int> calculateSpan(int price[], int n)
    {
       vector <int>v;
       vector <int>v1(n);
       stack<pair<int,int>>st;
       for(int i=0;i<n;i++){
           if(st.empty()){
               v.push_back(-1);   //base case so that 0 - (-1) = 1;
           }
           else if(st.size() > 0 && st.top().first > price[i]){
               v.push_back(st.top().second);        // so that when we reduce from index , we get the result 1 exactly.
           }
           else if(st.size() > 0 && st.top().first <= price[i]){
               while(st.size() > 0 && st.top().first <= price[i]){
                   st.pop();  // until greater element is found
               }
               if(st.size()==0){
                   v.push_back(-1);   // it means we hit base case , so we'll add 1 to the final output. 6 - (-1) = 7.
               }
               else{
                   v.push_back(st.top().second); // else we push the greatest element index for position in vector.
               }
           }
           st.push({price[i],i});  //push element with its own index.
       }
       for(int j=0;j<n;j++){
           v1[j] = j - v[j];     // subtract normal index position with vector to get window size for each position.
       }
       return v1;
    }
