/*Approach:
Input: preorder = [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12] , construct this tree.
1)Brute-Force :
Like the insert function() using to insert data into the BST , we can do a similar thing: root = dfs(root,data) , dfs(root,10) , dfs(root,5) , dfs(root,7).
But this takes O(N*H) time and O(N) space , not very efficient.

2) Sort the vector , we get the inorder (ASCENDING ORDER)and preorder : with this a unique tree will be created and it will be a BST.
how did we get inorder from preorder ? : we know that for a BST , the tree's inorder will alwys be sorted , therefore we just the SORT the vector and thus get inorder.
time - O(NlogN) : sorting space - O(N)

3) 

*/

1) Node* inserts(Node* root,int &data){      [INSERT]
        if(root==NULL){
            Node *newnode = new Node(data);    //new slot is found where it can be inserted
            return newnode;
        }
        if(root->data > data){
            root->left = inserts(root->left,data);
        }
        else if(root->data < data){
            root->right = inserts(root->right,data);
        }
        return root;    //to backtrack the updated node which has a new left or right child attached till the root.
    }
for(int i=0;i<size;i++)
{
inserts(root,arr[i]);
}

2) Node* construct(int in[] , int instart , int inend , int pre[] , int prestart , int preend, map<int,queue<int>>&mp){
        if(prestart > preend || instart > inend){
            return NULL;
        }
        int idx = mp[pre[prestart]].front();
        mp[pre[prestart]].pop();
        Node *root = new Node(pre[prestart]);
        int nleftelem = idx - instart;
        root->left = construct(in,instart,idx-1,pre,prestart+1,prestart+nleftelem,mp);
        root->right = construct(in,idx+1,inend,pre,prestart+nleftelem+1,preend,mp);
        return root;
    }
    
    
    Node* buildTree(int in[],int pre[], int n)
    {
        if(n==0){
            return NULL;
        }
        //int instart = 0,prestart=0,inend=n-1,preend=n-1;
        map<int,queue<int>>mp;
        for(int i=0;i<n;i++){
            mp[in[i]].push(i);
        }
        return construct(in,0,n-1,pre,0,n-1,mp);
    }

3) 
