/* Approach:
Return the Number of nodes present in a complete BT : all levels are filled except the last level , where the nodes are as left as possible.
         1
       /   \
      2     3
     / \    /   cnt = 6
    4   5  6
Brute-Force : we perform either dfs or bfs and count all nodes , but this is O(N) time complexity. 
1) [OPTIMISED] : using the property of complete BT , 
Number of Nodes = 2^H -1 : this condition is true when the left height == right height , why so: we always start a level in complete bt from the leftmost side only
so , we find the leftmost height of the tree and then the rightmost height of the tree : if they are equal its a perfect bt , then we return 2^h-1.
if they are not equal : like the above diagram : we break the problem further down and perform dfs and store the left and right values. if ultimately we dont get
the right and left as equal : we just return the overall sum of leftnodes + rightnodes + root node count together.
time - O(logN) space - O(H)
*/

1) int findHeightLeft(node* cur) {        //find the left height of the tree
        int hght = 0; 
        while(cur) {
            hght++; 
            cur = cur->left; 
        }
        return hght; 
    }    
    int findHeightRight(node* cur) {      //find the right height of the tree
        int hght = 0; 
        while(cur) {
            hght++; 
            cur = cur->right; 
        }
        return hght; 
    }
    int countNodes(node* root) {
        if(root == NULL) return 0;   // base case
        
        int lh = findHeightLeft(root);   
        int rh = findHeightRight(root); 
        
        if(lh == rh) return (1<<lh) - 1; //if (l==r) : it means we can just apply our relationship formula and return : we don't have to traverse anymore
        
        int leftNodes = countNodes(root->left); // if not, we have to break the problem further down.till they are finally equal at some node point 
        int rightNodes = countNodes(root->right);    //or we just then return the sum of left+right+1 ultimately.
        
        return 1 + leftNodes + rightNodes; //overall sum for a stack frame where the left and right don't match.
    }
