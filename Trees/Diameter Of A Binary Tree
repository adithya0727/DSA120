/* Approach:
=> The diameter of a tree (sometimes called the width) is the number of nodes on the longest path between two end nodes and this path may or may not pass from the root.
Tree 1: Longest Path Through Root  => 
         1
        / \
       2   3
      / \   \
     4   5   6
    / \     / \
   7   8   9   10
  / \
 11  12  
ans : In this tree, the longest path passes through the root (node 1) and consists of the nodes: 11 - 7 - 4 - 2 - 1 - 3 - 6 - 10. The diameter of this tree is 7.
Tree 2 : Longest Path Not Through Root = >
        1
       / \
      2   3
     / \   \
    4   5   6
   / \   \
  7   8   9
     / \
    10 11   
ans : In this tree, the longest path does not pass through the root (node 1). Instead, it passes through the left subtree and consists of the nodes: 10 - 8 - 4 - 2 - 1 - 3 - 6 - 9. The diameter of this tree is 8.

1) 

*/

1) int Height(Node *root){
      if(root==NULL){
          return 0;
      }
      int leftheight = Height(root->left);
      int rightheight = Height(root->right);
      return max(leftheight,rightheight)+1;
  }
    // Function to return the diameter of a Binary Tree.
    int diameter(Node* root) {
        if(root==NULL){
            return 0;
        }
        queue<Node*>q;
        q.push(root);
        int leftheight=0,rightheight=0,ans=0;
        while(!q.empty()){
            Node *temp = q.front();
            q.pop();
            if(temp->left){
                leftheight = Height(temp->left);
                q.push(temp->left);
            }
            else{
                leftheight=0;
            }
            if(temp->right){
                rightheight = Height(temp->right);
                q.push(temp->right);
            }
            else{
                rightheight = 0;
            }
            ans = max(ans,(leftheight+rightheight+1));
        }
        return ans;
    }
