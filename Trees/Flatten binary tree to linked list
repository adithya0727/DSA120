/* Approach:
Given the root of a binary tree, flatten the tree into a "lLinked list":

The "linked list" should use the same Node class where the right child pointer points to the next node in the list and the left child pointer is always null.
The "linked list" should be in the same order as a pre-order traversal of the binary tree.
Example 1:

Input : 
          1
        /   \
       2     5
      / \     \
     3   4     6
Output :
1 2 3 4 5 6 
Explanation: 
After flattening, the tree looks 
like this
    1
     \
      2
       \
        3
         \
          4
           \
            5
             \
              6 
Here, left of each node points 
to NULL and right contains the 
next node in preorder.The inorder 
traversal of this flattened tree 
is 1 2 3 4 5 6.
1) So , here we start be performing the REVERSE OF PRE ORDER : RIGHT-LEFT-MIDDLE based recursion.
so initially we move the rightmost node in the tree and the left most in that : in this : we'll ATTACH the prev == NULL as right and make all the node's left as NULL.
update curent nodes' value as prev and return. 
Basically , from the BOTTOM UP APPRAOCH : we are inserting the elements in the order right,left,middle. From the top of the root the output flattened BT will look
in the order middle,left,right(OPPOSITE).
time - O(N) space - O(H)
*/

1) Node *prev = NULL;
    void dfs(Node* root){
        if(root==NULL){
            return;
        }
        dfs(root->right);
        dfs(root->left);
        root->right = prev;
        root->left = NULL;
        prev = root;
        return;
    }
    
    void flatten(Node *root)
    {
        dfs(root);
    }
