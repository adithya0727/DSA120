/* Approach:

1) Insertion : The idea is to do an iterative level order traversal(BFS) of the given tree using queue.
If we find a node whose left child is empty, we make a new key as the left child of the node.
Else if we find a node whose right child is empty, we make the new key as the right child.
We keep traversing the tree until we find a node whose either left or right child is empty. 

2) intention : find the value of the bottommost and rightmost node and replace it with the element to be deleted and then finally delete the rightmost bottommost node.
Perform bfs and find the node to be deleted and store it (==key) , then keep one more node called parent which keeps track of the final parent which contains the 
last node in its left or right side.
if element is found , replace with lastnode->data , go to final parent and release the left or right side accordingly and delete last node and return.

*/

1) Node* InsertNode(Node* root, int data)
{
    // If the tree is empty, assign new node address to root
    if (root == NULL) {
        root = CreateNode(data);
        return root;
    }
 
    // Else, do level order traversal until we find an empty
    // place, i.e. either left child or right child of some
    // node is pointing to NULL.
    queue<Node*> q;
    q.push(root);
 
    while (!q.empty()) {
        Node* temp = q.front();
        q.pop();
 
        if (temp->left != NULL)
            q.push(temp->left);
        else {
            temp->left = CreateNode(data);
            return root;
        }
 
        if (temp->right != NULL)
            q.push(temp->right);
        else {
            temp->right = CreateNode(data);
            return root;
        }
    }
}


2) struct Node* deletion(struct Node* root, int key) 
{ 
    if (root == NULL) 
        return NULL; 
    if (root->left == NULL && root->right == NULL) { 
        if (root->data == key) 
            return NULL; 
        else
            return root; 
    } 
    Node* key_node = NULL; 
    Node* temp; 
    Node* last; 
    queue<Node*> q; 
    q.push(root); 
    // Do level order traversal to find deepest 
    // node(temp), node to be deleted (key_node) 
    // and parent of deepest node(last) 
    while (!q.empty()) { 
        temp = q.front(); 
        q.pop(); 
        if (temp->data == key) 
            key_node = temp; 
        if (temp->left) { 
            last = temp; // storing the parent node 
            q.push(temp->left); 
        } 
        if (temp->right) { 
            last = temp; // storing the parent node 
            q.push(temp->right); 
        } 
    } 
    if (key_node != NULL) { 
        key_node->data 
            = temp->data; // replacing key_node's data to 
                          // deepest node's data 
        if (last->right == temp) 
            last->right = NULL; 
        else
            last->left = NULL; 
        delete (temp); 
    } 
    return root; 
} 
