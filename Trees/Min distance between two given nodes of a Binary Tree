/* Approach:
Given a binary tree with n nodes and two node values, a and b, your task is to find the minimum distance between them.
The given two nodes are guaranteed to be in the binary tree and all node values are unique.
Input:
        11
      /   \
     22    33
    /  \  /  \
  44   55 66 77
a = 77, b = 22
Output:  3
1) Same pattern as LOWEST COMMON ANCESTOR IF YOU OBSERVE : we just have to find the lca for both nodes which we already know how to do.
from the LCA AS ROOT => find the distance from lca to a and then lca to b and then add these two values to get the minimum distance between them.
time - O(N) space - O(H)
*/

1) int findLevel(Node* root, int k, int level)
{
    if (root == NULL)
        return -1;
    if (root->data == k)
        return level;
 
    int left = findLevel(root->left, k, level + 1);
    if (left == -1)
        return findLevel(root->right, k, level + 1);
    return left;
}

Node* cal(Node *root, int &n1, int &n2) {
    if (!root || root->data == n1 || root->data == n2) {    
        return root;    
    }  

    Node* left = cal(root->left, n1, n2);   
    Node* right = cal(root->right, n1, n2);

    if (!left) {      
        return right;
    } else if (!right) {
        return left;
    } else {      
        return root;
    }
}

/* Should return minimum distance between a and b
in a tree with given root*/
int findDist(Node* root, int a, int b) {
    if (!root) {
        return 0;
    }

    Node* lca = cal(root, a, b);
    int d1 = findLevel(lca, a, 0);
    int d2 = findLevel(lca, b, 0);
    return d1+d2;
}
