/* Approach:  PATTERN : [VERTICAL TRAVERSAL]
Printing different views of a Binary Tree : INTUITION => VISUALISE LOOKING AT THE TREE FROM VARIOUS GIVEN POSITIONS FOR CLARITY.
Concept : Horizontal Distance => the distance from the root of a tree , ie. like drawing those vertical lines on a tree.
ROOT is considered as 0 , as we move left hd-1 and right would be hd+1.
1) Top View : So to get the horizontal view : we only have to print the FIRST/topmost Node->data for each horizontal distance , we move from left to right.
Similar pattern : use queue to store hd and node : map => KEY - hd and value (we only need one,first one) : if map is empty() , it shows that we are in a new hd and thus
insert the first node , if already exist nvm , as we got the top node for that horizontal distance.
time - O(N)*logN space - O(N) 
2) Bottom View : Same approach as previous : here we use vector<int> in map to store all map values since we want the Bottom most node->val for each horizontal Distance.
and then finally while storing in vector we push_back the back() =>last values of each vector for each hd.
time - O(N)*logN space - O(N) 
3a) Left View : Now , as we observed hd previously : here if we look at a tree , it is the levels that MATTER here, becuase we basically view the leftmost node
on each level till the farther most end. Similar approach as before : as we go down each level , we store the leftmost occuring element (since we use BFS , Left is
always visited first anyways) and then we push it. [BFS METHOD] 
3b) recursive : we follow through the same with a little better use of time and space : convert the bfs=>dfs , preorder and increase (level+1) as we go deeper.
here , we use the constraint if (level == v.size()) : which indicates that the first left element is always first inserted in vector and if see another element in
the same level , the size willbe greater than current level : which indicates that for this level already the leftmost node has been inserted , so skip the IF.
time - O(N) space - O(H)
4a) Right View : Same logic as left view iterative : just make the right move before left , and we'll be storing all the rightmost elements for each level.

4b) recursive : same a left view recursive , make right first and then left.
*/

1) vector<int> topView(Node *root)                    [TOP VIEW]
    {
        vector<int>v;
        if(root==NULL){
            return v;
        }
        queue<pair<int,Node*>>q;
        map<int,int>m;
        q.push({0,root});
        while(!q.empty()){
            auto p = q.front();
            q.pop();
            Node *temp = p.second;
            int hd = p.first;
            if(m.find(hd) == m.end()){
                m[hd] = temp->data;
            }
            if(temp->left){
                q.push({hd-1,temp->left});
            }
            if(temp->right){
                q.push({hd+1,temp->right});
            }
        }
        for(auto &var : m){
            v.push_back(var.second);
        }
        return v;
    }


2) vector <int> bottomView(Node *root) {                [BOTTOM VIEW]
        vector<int>v;
        if(root==NULL){
            return v;
        }
        queue<pair<int,Node*>>q;
        map<int,vector<int>>m;
        q.push({0,root});
        while(!q.empty()){
            auto p = q.front();
            q.pop();
            Node *temp = p.second;
            int hd = p.first;
            m[hd].push_back(temp->data);
            if(temp->left){
                q.push({hd-1,temp->left});
            }
            if(temp->right){
                q.push({hd+1,temp->right});
            }
        }
        for(auto &var : m){
            v.push_back(var.second.back());
        }
        return v;
    }

3a) vector<int> leftView(Node *root)               [LEFT VIEW ITERATIVE]
{
   vector<int>v;
   if(root==NULL){
       return v;
   }
   queue<pair<int,Node*>>q;
   map<int,int>m;
   q.push({0,root});
   while(!q.empty()){
       auto p = q.front();
       q.pop();
       Node *temp = p.second;
       int level = p.first;
       if(m.find(level) == m.end()){
           m[level] = temp->data;
       }
       if(temp->left){
           q.push({level+1,temp->left});
       }
       if(temp->right){
           q.push({level+1,temp->right});
       }
   }
   for(auto &var : m){
       v.push_back(var.second);
   }
   return v;
}



3b) void dfs(Node *root, int level, vector<int> &v){            [LEFT VIEW RECURSIVE]
    if(root==NULL){
        return;
    }
    if(level == v.size()){
        v.push_back(root->data);
    }
    dfs(root->left,level+1,v);
    dfs(root->right,level+1,v);
}
vector<int> leftView(Node *root)
{
   vector<int>v;
   if(root==NULL){
       return v;
   }
   int level=0;
   dfs(root,level,v);
   return v;
}


4a) vector<int> rightView(Node *root)                    [RIGHT VIEW ITERATIVE]
    {
        vector<int>v;
       if(root==NULL){
           return v;
       }
       queue<pair<int,Node*>>q;
       map<int,int>m;
       q.push({0,root});
       int level=0;
       while(!q.empty()){
           auto p = q.front();
           q.pop();
           Node *temp = p.second;
           level = p.first;
           if(m.find(level) == m.end()){
               m[level] = temp->data;
           }
           if(temp->right){
               q.push({level+1,temp->right});
           }
           if(temp->left){
               q.push({level+1,temp->left});
           }
       }
       for(auto &var : m){
           v.push_back(var.second);
       }
       return v;
    }



4b) void dfs(Node *root,int level,vector<int> &v){                    [RIGHT VIEW RECURSIVE]
        if(root==NULL){
            return;
        }
        if(level == v.size()){
            v.push_back(root->data);
        }
        dfs(root->right,level+1,v);
        dfs(root->left,level+1,v);
    }
    vector<int> rightView(Node *root)
    {
        vector<int>v;
       if(root==NULL){
           return v;
       }
       int level=0;
       dfs(root,level,v);
       return v;
    }                                                                
