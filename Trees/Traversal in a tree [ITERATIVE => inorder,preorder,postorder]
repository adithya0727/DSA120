/* Approach:
              1
            /   \
          2      3
        /  \
      4     5
Lets know recursive approach : left - mid - right is the order to print (4,2,5,1,3). 
algo : 1) func(root->left) 2) cout<<root->val 3) func(root->right) . Now lets relate it to iterative.
1) In-order : Using Stack : we start with moving towards the left subtree till it reaches null. (like step 1)
then we print root->val (like step 2) and then we move to the right element and start checking for left first , print and right again and the process repeats itself.
Pattern is very similar : we store the elements in stack , like stack unwinding : we pop the top element and return to the previous node and again print and perform right.
It is the same as recursion literally. time and space : O(N).

2) Pre-order : Only one variation in the code : the print statement is called within the second while loop itself as for each subtree the order of printing would be
mid -> left -> right : so it would make sense to print the mid element for each subtree first , move towards the left and then print the left ones and finally move towards
the right and follow so.  time and space : O(N).

3) Post-order : This follows a slightly different approach using stack: left->right->middle appraoch. So in each subtree , this must be followed through.
INTUITION : first : run through the left subtree till we reach Null , second : two paths => if right subtree doesn't EXIST , its a leftside leaf so we print it , 
update it as latest node and pop() from stack.
Root is still pointing to Null , therefore we curr is s.top() now , which is the middle element : now we have to print right before middle. 
second path => if curr->right EXISTS and It is the not LATEST node : then we havent traversed it yet , so we move the root->right and print that and then come back
to parent once it reaches Null and print the middle Finally . Follow this for all the subtrees.
time and space : O(N).
*/

1) //Iterative function for inorder tree traversal
void inOrder(struct Node* root)
{
    stack<Node*> s;
    Node* curr = root;
 
    while (curr != NULL || s.empty() == false) {
         
        // Reach the left most Node of the
        // curr Node
        while (curr != NULL) {
             
            // Place pointer to a tree node on
            // the stack before traversing
            // the node's left subtree
            s.push(curr);
            curr = curr->left;
        }
 
        // Current must be NULL at this point
        curr = s.top();
        s.pop();
 
        cout << curr->data << " ";
 
        // we have visited the node and its
        // left subtree.  Now, it's right
        // subtree's turn
        curr = curr->right;
 
    }
}

2) void PreOrder(struct Node* root)
{
    stack<Node*> s;
    Node* curr = root;
 
    while (curr != NULL || s.empty() == false) {
         
        while (curr != NULL) {
             cout << curr->data << " ";
            s.push(curr);
            curr = curr->left;
        }
        curr = s.top();
        s.pop();
        curr = curr->right;
    }
}

3) void postorderTraversal(TreeNode* root) {
    if (root == nullptr) return;

    stack<TreeNode*> nodeStack;
    TreeNode* lastVisitedNode = nullptr;

    while (root != nullptr || !nodeStack.empty()) {
        if (root != nullptr) {
            nodeStack.push(root);
            root = root->left;
        } else {
            TreeNode* peekNode = nodeStack.top();
            if (peekNode->right != nullptr && lastVisitedNode != peekNode->right) {
                root = peekNode->right;
            } else {
                cout << peekNode->val << " ";
                lastVisitedNode = peekNode;
                nodeStack.pop();
            }
        }
    }
}

